/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 28800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? 28800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 100025.0, "series": [{"data": [[0.0, 144.0], [0.1, 149.0], [0.2, 150.0], [0.3, 151.0], [0.4, 152.0], [0.5, 152.0], [0.6, 153.0], [0.7, 153.0], [0.8, 154.0], [0.9, 154.0], [1.0, 155.0], [1.1, 155.0], [1.2, 156.0], [1.3, 156.0], [1.4, 156.0], [1.5, 157.0], [1.6, 157.0], [1.7, 158.0], [1.8, 158.0], [1.9, 158.0], [2.0, 159.0], [2.1, 159.0], [2.2, 160.0], [2.3, 160.0], [2.4, 161.0], [2.5, 161.0], [2.6, 162.0], [2.7, 162.0], [2.8, 163.0], [2.9, 163.0], [3.0, 164.0], [3.1, 165.0], [3.2, 166.0], [3.3, 167.0], [3.4, 169.0], [3.5, 171.0], [3.6, 174.0], [3.7, 180.0], [3.8, 183.0], [3.9, 185.0], [4.0, 185.0], [4.1, 186.0], [4.2, 186.0], [4.3, 187.0], [4.4, 187.0], [4.5, 187.0], [4.6, 188.0], [4.7, 188.0], [4.8, 188.0], [4.9, 188.0], [5.0, 188.0], [5.1, 189.0], [5.2, 189.0], [5.3, 189.0], [5.4, 189.0], [5.5, 189.0], [5.6, 189.0], [5.7, 189.0], [5.8, 190.0], [5.9, 190.0], [6.0, 190.0], [6.1, 190.0], [6.2, 190.0], [6.3, 190.0], [6.4, 190.0], [6.5, 190.0], [6.6, 191.0], [6.7, 191.0], [6.8, 191.0], [6.9, 191.0], [7.0, 191.0], [7.1, 191.0], [7.2, 191.0], [7.3, 191.0], [7.4, 191.0], [7.5, 191.0], [7.6, 192.0], [7.7, 192.0], [7.8, 192.0], [7.9, 192.0], [8.0, 192.0], [8.1, 192.0], [8.2, 192.0], [8.3, 192.0], [8.4, 192.0], [8.5, 192.0], [8.6, 192.0], [8.7, 192.0], [8.8, 192.0], [8.9, 193.0], [9.0, 193.0], [9.1, 193.0], [9.2, 193.0], [9.3, 193.0], [9.4, 193.0], [9.5, 193.0], [9.6, 193.0], [9.7, 193.0], [9.8, 193.0], [9.9, 193.0], [10.0, 193.0], [10.1, 194.0], [10.2, 194.0], [10.3, 194.0], [10.4, 194.0], [10.5, 194.0], [10.6, 194.0], [10.7, 194.0], [10.8, 194.0], [10.9, 194.0], [11.0, 194.0], [11.1, 194.0], [11.2, 194.0], [11.3, 194.0], [11.4, 194.0], [11.5, 195.0], [11.6, 195.0], [11.7, 195.0], [11.8, 195.0], [11.9, 195.0], [12.0, 195.0], [12.1, 195.0], [12.2, 195.0], [12.3, 195.0], [12.4, 195.0], [12.5, 195.0], [12.6, 195.0], [12.7, 195.0], [12.8, 195.0], [12.9, 195.0], [13.0, 196.0], [13.1, 196.0], [13.2, 196.0], [13.3, 196.0], [13.4, 196.0], [13.5, 196.0], [13.6, 196.0], [13.7, 196.0], [13.8, 196.0], [13.9, 196.0], [14.0, 196.0], [14.1, 196.0], [14.2, 196.0], [14.3, 196.0], [14.4, 196.0], [14.5, 197.0], [14.6, 197.0], [14.7, 197.0], [14.8, 197.0], [14.9, 197.0], [15.0, 197.0], [15.1, 197.0], [15.2, 197.0], [15.3, 197.0], [15.4, 197.0], [15.5, 197.0], [15.6, 197.0], [15.7, 197.0], [15.8, 197.0], [15.9, 198.0], [16.0, 198.0], [16.1, 198.0], [16.2, 198.0], [16.3, 198.0], [16.4, 198.0], [16.5, 198.0], [16.6, 198.0], [16.7, 198.0], [16.8, 198.0], [16.9, 198.0], [17.0, 198.0], [17.1, 198.0], [17.2, 199.0], [17.3, 199.0], [17.4, 199.0], [17.5, 199.0], [17.6, 199.0], [17.7, 199.0], [17.8, 199.0], [17.9, 199.0], [18.0, 199.0], [18.1, 199.0], [18.2, 199.0], [18.3, 199.0], [18.4, 200.0], [18.5, 200.0], [18.6, 200.0], [18.7, 200.0], [18.8, 200.0], [18.9, 200.0], [19.0, 200.0], [19.1, 200.0], [19.2, 200.0], [19.3, 200.0], [19.4, 200.0], [19.5, 201.0], [19.6, 201.0], [19.7, 201.0], [19.8, 201.0], [19.9, 201.0], [20.0, 201.0], [20.1, 201.0], [20.2, 201.0], [20.3, 201.0], [20.4, 201.0], [20.5, 202.0], [20.6, 202.0], [20.7, 202.0], [20.8, 202.0], [20.9, 202.0], [21.0, 202.0], [21.1, 202.0], [21.2, 202.0], [21.3, 202.0], [21.4, 203.0], [21.5, 203.0], [21.6, 203.0], [21.7, 203.0], [21.8, 203.0], [21.9, 203.0], [22.0, 203.0], [22.1, 204.0], [22.2, 204.0], [22.3, 204.0], [22.4, 204.0], [22.5, 204.0], [22.6, 204.0], [22.7, 204.0], [22.8, 205.0], [22.9, 205.0], [23.0, 205.0], [23.1, 205.0], [23.2, 205.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 206.0], [23.7, 206.0], [23.8, 207.0], [23.9, 207.0], [24.0, 207.0], [24.1, 208.0], [24.2, 208.0], [24.3, 208.0], [24.4, 208.0], [24.5, 209.0], [24.6, 209.0], [24.7, 209.0], [24.8, 210.0], [24.9, 210.0], [25.0, 211.0], [25.1, 211.0], [25.2, 211.0], [25.3, 212.0], [25.4, 212.0], [25.5, 213.0], [25.6, 213.0], [25.7, 214.0], [25.8, 214.0], [25.9, 215.0], [26.0, 215.0], [26.1, 216.0], [26.2, 216.0], [26.3, 217.0], [26.4, 217.0], [26.5, 218.0], [26.6, 218.0], [26.7, 219.0], [26.8, 219.0], [26.9, 220.0], [27.0, 220.0], [27.1, 221.0], [27.2, 221.0], [27.3, 222.0], [27.4, 222.0], [27.5, 223.0], [27.6, 223.0], [27.7, 223.0], [27.8, 224.0], [27.9, 224.0], [28.0, 224.0], [28.1, 225.0], [28.2, 225.0], [28.3, 225.0], [28.4, 226.0], [28.5, 226.0], [28.6, 226.0], [28.7, 227.0], [28.8, 227.0], [28.9, 227.0], [29.0, 227.0], [29.1, 228.0], [29.2, 228.0], [29.3, 228.0], [29.4, 228.0], [29.5, 229.0], [29.6, 229.0], [29.7, 229.0], [29.8, 229.0], [29.9, 230.0], [30.0, 230.0], [30.1, 230.0], [30.2, 230.0], [30.3, 231.0], [30.4, 231.0], [30.5, 231.0], [30.6, 231.0], [30.7, 232.0], [30.8, 232.0], [30.9, 232.0], [31.0, 232.0], [31.1, 233.0], [31.2, 233.0], [31.3, 233.0], [31.4, 233.0], [31.5, 234.0], [31.6, 234.0], [31.7, 234.0], [31.8, 234.0], [31.9, 234.0], [32.0, 235.0], [32.1, 235.0], [32.2, 235.0], [32.3, 235.0], [32.4, 235.0], [32.5, 236.0], [32.6, 236.0], [32.7, 236.0], [32.8, 237.0], [32.9, 237.0], [33.0, 237.0], [33.1, 237.0], [33.2, 238.0], [33.3, 238.0], [33.4, 238.0], [33.5, 238.0], [33.6, 239.0], [33.7, 239.0], [33.8, 239.0], [33.9, 240.0], [34.0, 240.0], [34.1, 240.0], [34.2, 241.0], [34.3, 241.0], [34.4, 241.0], [34.5, 242.0], [34.6, 242.0], [34.7, 242.0], [34.8, 243.0], [34.9, 243.0], [35.0, 243.0], [35.1, 244.0], [35.2, 244.0], [35.3, 245.0], [35.4, 245.0], [35.5, 246.0], [35.6, 246.0], [35.7, 247.0], [35.8, 247.0], [35.9, 247.0], [36.0, 248.0], [36.1, 249.0], [36.2, 249.0], [36.3, 250.0], [36.4, 250.0], [36.5, 251.0], [36.6, 251.0], [36.7, 251.0], [36.8, 252.0], [36.9, 252.0], [37.0, 253.0], [37.1, 253.0], [37.2, 253.0], [37.3, 253.0], [37.4, 254.0], [37.5, 254.0], [37.6, 254.0], [37.7, 255.0], [37.8, 255.0], [37.9, 255.0], [38.0, 255.0], [38.1, 255.0], [38.2, 256.0], [38.3, 256.0], [38.4, 256.0], [38.5, 256.0], [38.6, 256.0], [38.7, 256.0], [38.8, 257.0], [38.9, 257.0], [39.0, 257.0], [39.1, 257.0], [39.2, 257.0], [39.3, 257.0], [39.4, 258.0], [39.5, 258.0], [39.6, 258.0], [39.7, 258.0], [39.8, 258.0], [39.9, 258.0], [40.0, 258.0], [40.1, 258.0], [40.2, 259.0], [40.3, 259.0], [40.4, 259.0], [40.5, 259.0], [40.6, 259.0], [40.7, 259.0], [40.8, 259.0], [40.9, 259.0], [41.0, 259.0], [41.1, 260.0], [41.2, 260.0], [41.3, 260.0], [41.4, 260.0], [41.5, 260.0], [41.6, 260.0], [41.7, 260.0], [41.8, 260.0], [41.9, 260.0], [42.0, 260.0], [42.1, 260.0], [42.2, 261.0], [42.3, 261.0], [42.4, 261.0], [42.5, 261.0], [42.6, 261.0], [42.7, 261.0], [42.8, 261.0], [42.9, 261.0], [43.0, 261.0], [43.1, 261.0], [43.2, 261.0], [43.3, 261.0], [43.4, 261.0], [43.5, 262.0], [43.6, 262.0], [43.7, 262.0], [43.8, 262.0], [43.9, 262.0], [44.0, 262.0], [44.1, 262.0], [44.2, 262.0], [44.3, 262.0], [44.4, 262.0], [44.5, 262.0], [44.6, 262.0], [44.7, 262.0], [44.8, 262.0], [44.9, 262.0], [45.0, 263.0], [45.1, 263.0], [45.2, 263.0], [45.3, 263.0], [45.4, 263.0], [45.5, 263.0], [45.6, 263.0], [45.7, 263.0], [45.8, 263.0], [45.9, 263.0], [46.0, 263.0], [46.1, 263.0], [46.2, 263.0], [46.3, 263.0], [46.4, 263.0], [46.5, 263.0], [46.6, 264.0], [46.7, 264.0], [46.8, 264.0], [46.9, 264.0], [47.0, 264.0], [47.1, 264.0], [47.2, 264.0], [47.3, 264.0], [47.4, 264.0], [47.5, 264.0], [47.6, 264.0], [47.7, 264.0], [47.8, 264.0], [47.9, 264.0], [48.0, 264.0], [48.1, 264.0], [48.2, 264.0], [48.3, 264.0], [48.4, 265.0], [48.5, 265.0], [48.6, 265.0], [48.7, 265.0], [48.8, 265.0], [48.9, 265.0], [49.0, 265.0], [49.1, 265.0], [49.2, 265.0], [49.3, 265.0], [49.4, 265.0], [49.5, 265.0], [49.6, 265.0], [49.7, 265.0], [49.8, 265.0], [49.9, 265.0], [50.0, 265.0], [50.1, 265.0], [50.2, 265.0], [50.3, 266.0], [50.4, 266.0], [50.5, 266.0], [50.6, 266.0], [50.7, 266.0], [50.8, 266.0], [50.9, 266.0], [51.0, 266.0], [51.1, 266.0], [51.2, 266.0], [51.3, 266.0], [51.4, 266.0], [51.5, 266.0], [51.6, 266.0], [51.7, 266.0], [51.8, 266.0], [51.9, 266.0], [52.0, 266.0], [52.1, 266.0], [52.2, 266.0], [52.3, 266.0], [52.4, 267.0], [52.5, 267.0], [52.6, 267.0], [52.7, 267.0], [52.8, 267.0], [52.9, 267.0], [53.0, 267.0], [53.1, 267.0], [53.2, 267.0], [53.3, 267.0], [53.4, 267.0], [53.5, 267.0], [53.6, 267.0], [53.7, 267.0], [53.8, 267.0], [53.9, 267.0], [54.0, 267.0], [54.1, 267.0], [54.2, 267.0], [54.3, 267.0], [54.4, 267.0], [54.5, 267.0], [54.6, 267.0], [54.7, 268.0], [54.8, 268.0], [54.9, 268.0], [55.0, 268.0], [55.1, 268.0], [55.2, 268.0], [55.3, 268.0], [55.4, 268.0], [55.5, 268.0], [55.6, 268.0], [55.7, 268.0], [55.8, 268.0], [55.9, 268.0], [56.0, 268.0], [56.1, 268.0], [56.2, 268.0], [56.3, 268.0], [56.4, 268.0], [56.5, 268.0], [56.6, 268.0], [56.7, 268.0], [56.8, 268.0], [56.9, 268.0], [57.0, 268.0], [57.1, 269.0], [57.2, 269.0], [57.3, 269.0], [57.4, 269.0], [57.5, 269.0], [57.6, 269.0], [57.7, 269.0], [57.8, 269.0], [57.9, 269.0], [58.0, 269.0], [58.1, 269.0], [58.2, 269.0], [58.3, 269.0], [58.4, 269.0], [58.5, 269.0], [58.6, 269.0], [58.7, 269.0], [58.8, 269.0], [58.9, 269.0], [59.0, 269.0], [59.1, 269.0], [59.2, 269.0], [59.3, 269.0], [59.4, 269.0], [59.5, 269.0], [59.6, 270.0], [59.7, 270.0], [59.8, 270.0], [59.9, 270.0], [60.0, 270.0], [60.1, 270.0], [60.2, 270.0], [60.3, 270.0], [60.4, 270.0], [60.5, 270.0], [60.6, 270.0], [60.7, 270.0], [60.8, 270.0], [60.9, 270.0], [61.0, 270.0], [61.1, 270.0], [61.2, 270.0], [61.3, 270.0], [61.4, 270.0], [61.5, 270.0], [61.6, 270.0], [61.7, 270.0], [61.8, 270.0], [61.9, 270.0], [62.0, 270.0], [62.1, 271.0], [62.2, 271.0], [62.3, 271.0], [62.4, 271.0], [62.5, 271.0], [62.6, 271.0], [62.7, 271.0], [62.8, 271.0], [62.9, 271.0], [63.0, 271.0], [63.1, 271.0], [63.2, 271.0], [63.3, 271.0], [63.4, 271.0], [63.5, 271.0], [63.6, 271.0], [63.7, 271.0], [63.8, 271.0], [63.9, 271.0], [64.0, 271.0], [64.1, 271.0], [64.2, 271.0], [64.3, 271.0], [64.4, 271.0], [64.5, 271.0], [64.6, 272.0], [64.7, 272.0], [64.8, 272.0], [64.9, 272.0], [65.0, 272.0], [65.1, 272.0], [65.2, 272.0], [65.3, 272.0], [65.4, 272.0], [65.5, 272.0], [65.6, 272.0], [65.7, 272.0], [65.8, 272.0], [65.9, 272.0], [66.0, 272.0], [66.1, 272.0], [66.2, 272.0], [66.3, 272.0], [66.4, 272.0], [66.5, 272.0], [66.6, 272.0], [66.7, 272.0], [66.8, 272.0], [66.9, 272.0], [67.0, 272.0], [67.1, 273.0], [67.2, 273.0], [67.3, 273.0], [67.4, 273.0], [67.5, 273.0], [67.6, 273.0], [67.7, 273.0], [67.8, 273.0], [67.9, 273.0], [68.0, 273.0], [68.1, 273.0], [68.2, 273.0], [68.3, 273.0], [68.4, 273.0], [68.5, 273.0], [68.6, 273.0], [68.7, 273.0], [68.8, 273.0], [68.9, 273.0], [69.0, 273.0], [69.1, 273.0], [69.2, 273.0], [69.3, 273.0], [69.4, 273.0], [69.5, 273.0], [69.6, 274.0], [69.7, 274.0], [69.8, 274.0], [69.9, 274.0], [70.0, 274.0], [70.1, 274.0], [70.2, 274.0], [70.3, 274.0], [70.4, 274.0], [70.5, 274.0], [70.6, 274.0], [70.7, 274.0], [70.8, 274.0], [70.9, 274.0], [71.0, 274.0], [71.1, 274.0], [71.2, 274.0], [71.3, 274.0], [71.4, 274.0], [71.5, 274.0], [71.6, 274.0], [71.7, 274.0], [71.8, 274.0], [71.9, 274.0], [72.0, 275.0], [72.1, 275.0], [72.2, 275.0], [72.3, 275.0], [72.4, 275.0], [72.5, 275.0], [72.6, 275.0], [72.7, 275.0], [72.8, 275.0], [72.9, 275.0], [73.0, 275.0], [73.1, 275.0], [73.2, 275.0], [73.3, 275.0], [73.4, 275.0], [73.5, 275.0], [73.6, 275.0], [73.7, 275.0], [73.8, 275.0], [73.9, 275.0], [74.0, 275.0], [74.1, 275.0], [74.2, 275.0], [74.3, 275.0], [74.4, 276.0], [74.5, 276.0], [74.6, 276.0], [74.7, 276.0], [74.8, 276.0], [74.9, 276.0], [75.0, 276.0], [75.1, 276.0], [75.2, 276.0], [75.3, 276.0], [75.4, 276.0], [75.5, 276.0], [75.6, 276.0], [75.7, 276.0], [75.8, 276.0], [75.9, 276.0], [76.0, 276.0], [76.1, 276.0], [76.2, 276.0], [76.3, 276.0], [76.4, 276.0], [76.5, 276.0], [76.6, 276.0], [76.7, 277.0], [76.8, 277.0], [76.9, 277.0], [77.0, 277.0], [77.1, 277.0], [77.2, 277.0], [77.3, 277.0], [77.4, 277.0], [77.5, 277.0], [77.6, 277.0], [77.7, 277.0], [77.8, 277.0], [77.9, 277.0], [78.0, 277.0], [78.1, 277.0], [78.2, 277.0], [78.3, 277.0], [78.4, 277.0], [78.5, 277.0], [78.6, 277.0], [78.7, 278.0], [78.8, 278.0], [78.9, 278.0], [79.0, 278.0], [79.1, 278.0], [79.2, 278.0], [79.3, 278.0], [79.4, 278.0], [79.5, 278.0], [79.6, 278.0], [79.7, 278.0], [79.8, 278.0], [79.9, 278.0], [80.0, 278.0], [80.1, 278.0], [80.2, 278.0], [80.3, 278.0], [80.4, 278.0], [80.5, 278.0], [80.6, 278.0], [80.7, 279.0], [80.8, 279.0], [80.9, 279.0], [81.0, 279.0], [81.1, 279.0], [81.2, 279.0], [81.3, 279.0], [81.4, 279.0], [81.5, 279.0], [81.6, 279.0], [81.7, 279.0], [81.8, 279.0], [81.9, 279.0], [82.0, 279.0], [82.1, 279.0], [82.2, 279.0], [82.3, 279.0], [82.4, 279.0], [82.5, 279.0], [82.6, 280.0], [82.7, 280.0], [82.8, 280.0], [82.9, 280.0], [83.0, 280.0], [83.1, 280.0], [83.2, 280.0], [83.3, 280.0], [83.4, 280.0], [83.5, 280.0], [83.6, 280.0], [83.7, 280.0], [83.8, 280.0], [83.9, 280.0], [84.0, 280.0], [84.1, 280.0], [84.2, 281.0], [84.3, 281.0], [84.4, 281.0], [84.5, 281.0], [84.6, 281.0], [84.7, 281.0], [84.8, 281.0], [84.9, 281.0], [85.0, 281.0], [85.1, 281.0], [85.2, 281.0], [85.3, 281.0], [85.4, 281.0], [85.5, 281.0], [85.6, 281.0], [85.7, 281.0], [85.8, 282.0], [85.9, 282.0], [86.0, 282.0], [86.1, 282.0], [86.2, 282.0], [86.3, 282.0], [86.4, 282.0], [86.5, 282.0], [86.6, 282.0], [86.7, 282.0], [86.8, 282.0], [86.9, 282.0], [87.0, 282.0], [87.1, 282.0], [87.2, 283.0], [87.3, 283.0], [87.4, 283.0], [87.5, 283.0], [87.6, 283.0], [87.7, 283.0], [87.8, 283.0], [87.9, 283.0], [88.0, 283.0], [88.1, 283.0], [88.2, 283.0], [88.3, 284.0], [88.4, 284.0], [88.5, 284.0], [88.6, 284.0], [88.7, 284.0], [88.8, 284.0], [88.9, 284.0], [89.0, 284.0], [89.1, 284.0], [89.2, 284.0], [89.3, 284.0], [89.4, 285.0], [89.5, 285.0], [89.6, 285.0], [89.7, 285.0], [89.8, 285.0], [89.9, 285.0], [90.0, 285.0], [90.1, 285.0], [90.2, 285.0], [90.3, 285.0], [90.4, 286.0], [90.5, 286.0], [90.6, 286.0], [90.7, 286.0], [90.8, 286.0], [90.9, 286.0], [91.0, 286.0], [91.1, 286.0], [91.2, 286.0], [91.3, 287.0], [91.4, 287.0], [91.5, 287.0], [91.6, 287.0], [91.7, 287.0], [91.8, 287.0], [91.9, 287.0], [92.0, 287.0], [92.1, 288.0], [92.2, 288.0], [92.3, 288.0], [92.4, 288.0], [92.5, 288.0], [92.6, 288.0], [92.7, 289.0], [92.8, 289.0], [92.9, 289.0], [93.0, 289.0], [93.1, 289.0], [93.2, 289.0], [93.3, 290.0], [93.4, 290.0], [93.5, 290.0], [93.6, 290.0], [93.7, 290.0], [93.8, 291.0], [93.9, 291.0], [94.0, 291.0], [94.1, 291.0], [94.2, 291.0], [94.3, 292.0], [94.4, 292.0], [94.5, 292.0], [94.6, 292.0], [94.7, 293.0], [94.8, 293.0], [94.9, 293.0], [95.0, 294.0], [95.1, 294.0], [95.2, 294.0], [95.3, 295.0], [95.4, 295.0], [95.5, 295.0], [95.6, 296.0], [95.7, 296.0], [95.8, 297.0], [95.9, 297.0], [96.0, 298.0], [96.1, 298.0], [96.2, 299.0], [96.3, 300.0], [96.4, 300.0], [96.5, 301.0], [96.6, 302.0], [96.7, 303.0], [96.8, 304.0], [96.9, 305.0], [97.0, 306.0], [97.1, 307.0], [97.2, 309.0], [97.3, 311.0], [97.4, 313.0], [97.5, 316.0], [97.6, 319.0], [97.7, 323.0], [97.8, 326.0], [97.9, 330.0], [98.0, 336.0], [98.1, 345.0], [98.2, 362.0], [98.3, 382.0], [98.4, 406.0], [98.5, 441.0], [98.6, 511.0], [98.7, 650.0], [98.8, 1021.0], [98.9, 60005.0], [99.0, 60028.0], [99.1, 60193.0], [99.2, 60203.0], [99.3, 60226.0], [99.4, 60254.0], [99.5, 60261.0], [99.6, 60265.0], [99.7, 60269.0], [99.8, 60275.0], [99.9, 60282.0]], "isOverall": false, "label": "GenerateTransactionDatabase", "isController": false}, {"data": [[0.0, 165.0], [0.1, 170.0], [0.2, 171.0], [0.3, 172.0], [0.4, 173.0], [0.5, 173.0], [0.6, 174.0], [0.7, 175.0], [0.8, 175.0], [0.9, 176.0], [1.0, 176.0], [1.1, 176.0], [1.2, 177.0], [1.3, 177.0], [1.4, 178.0], [1.5, 178.0], [1.6, 178.0], [1.7, 179.0], [1.8, 179.0], [1.9, 180.0], [2.0, 180.0], [2.1, 181.0], [2.2, 181.0], [2.3, 182.0], [2.4, 182.0], [2.5, 183.0], [2.6, 183.0], [2.7, 184.0], [2.8, 185.0], [2.9, 185.0], [3.0, 186.0], [3.1, 187.0], [3.2, 188.0], [3.3, 190.0], [3.4, 191.0], [3.5, 194.0], [3.6, 197.0], [3.7, 202.0], [3.8, 204.0], [3.9, 205.0], [4.0, 206.0], [4.1, 207.0], [4.2, 207.0], [4.3, 208.0], [4.4, 208.0], [4.5, 208.0], [4.6, 209.0], [4.7, 209.0], [4.8, 209.0], [4.9, 209.0], [5.0, 209.0], [5.1, 209.0], [5.2, 210.0], [5.3, 210.0], [5.4, 210.0], [5.5, 210.0], [5.6, 210.0], [5.7, 210.0], [5.8, 211.0], [5.9, 211.0], [6.0, 211.0], [6.1, 211.0], [6.2, 211.0], [6.3, 211.0], [6.4, 211.0], [6.5, 212.0], [6.6, 212.0], [6.7, 212.0], [6.8, 212.0], [6.9, 212.0], [7.0, 212.0], [7.1, 212.0], [7.2, 212.0], [7.3, 212.0], [7.4, 212.0], [7.5, 213.0], [7.6, 213.0], [7.7, 213.0], [7.8, 213.0], [7.9, 213.0], [8.0, 213.0], [8.1, 213.0], [8.2, 213.0], [8.3, 213.0], [8.4, 213.0], [8.5, 213.0], [8.6, 214.0], [8.7, 214.0], [8.8, 214.0], [8.9, 214.0], [9.0, 214.0], [9.1, 214.0], [9.2, 214.0], [9.3, 214.0], [9.4, 214.0], [9.5, 214.0], [9.6, 214.0], [9.7, 214.0], [9.8, 215.0], [9.9, 215.0], [10.0, 215.0], [10.1, 215.0], [10.2, 215.0], [10.3, 215.0], [10.4, 215.0], [10.5, 215.0], [10.6, 215.0], [10.7, 215.0], [10.8, 215.0], [10.9, 215.0], [11.0, 215.0], [11.1, 215.0], [11.2, 216.0], [11.3, 216.0], [11.4, 216.0], [11.5, 216.0], [11.6, 216.0], [11.7, 216.0], [11.8, 216.0], [11.9, 216.0], [12.0, 216.0], [12.1, 216.0], [12.2, 216.0], [12.3, 216.0], [12.4, 216.0], [12.5, 216.0], [12.6, 217.0], [12.7, 217.0], [12.8, 217.0], [12.9, 217.0], [13.0, 217.0], [13.1, 217.0], [13.2, 217.0], [13.3, 217.0], [13.4, 217.0], [13.5, 217.0], [13.6, 217.0], [13.7, 217.0], [13.8, 217.0], [13.9, 218.0], [14.0, 218.0], [14.1, 218.0], [14.2, 218.0], [14.3, 218.0], [14.4, 218.0], [14.5, 218.0], [14.6, 218.0], [14.7, 218.0], [14.8, 218.0], [14.9, 218.0], [15.0, 218.0], [15.1, 218.0], [15.2, 218.0], [15.3, 219.0], [15.4, 219.0], [15.5, 219.0], [15.6, 219.0], [15.7, 219.0], [15.8, 219.0], [15.9, 219.0], [16.0, 219.0], [16.1, 219.0], [16.2, 219.0], [16.3, 219.0], [16.4, 219.0], [16.5, 220.0], [16.6, 220.0], [16.7, 220.0], [16.8, 220.0], [16.9, 220.0], [17.0, 220.0], [17.1, 220.0], [17.2, 220.0], [17.3, 220.0], [17.4, 220.0], [17.5, 220.0], [17.6, 220.0], [17.7, 220.0], [17.8, 221.0], [17.9, 221.0], [18.0, 221.0], [18.1, 221.0], [18.2, 221.0], [18.3, 221.0], [18.4, 221.0], [18.5, 221.0], [18.6, 221.0], [18.7, 221.0], [18.8, 221.0], [18.9, 222.0], [19.0, 222.0], [19.1, 222.0], [19.2, 222.0], [19.3, 222.0], [19.4, 222.0], [19.5, 222.0], [19.6, 222.0], [19.7, 222.0], [19.8, 223.0], [19.9, 223.0], [20.0, 223.0], [20.1, 223.0], [20.2, 223.0], [20.3, 223.0], [20.4, 223.0], [20.5, 223.0], [20.6, 223.0], [20.7, 224.0], [20.8, 224.0], [20.9, 224.0], [21.0, 224.0], [21.1, 224.0], [21.2, 224.0], [21.3, 224.0], [21.4, 224.0], [21.5, 225.0], [21.6, 225.0], [21.7, 225.0], [21.8, 225.0], [21.9, 225.0], [22.0, 225.0], [22.1, 225.0], [22.2, 226.0], [22.3, 226.0], [22.4, 226.0], [22.5, 226.0], [22.6, 226.0], [22.7, 226.0], [22.8, 227.0], [22.9, 227.0], [23.0, 227.0], [23.1, 227.0], [23.2, 227.0], [23.3, 228.0], [23.4, 228.0], [23.5, 228.0], [23.6, 228.0], [23.7, 229.0], [23.8, 229.0], [23.9, 229.0], [24.0, 230.0], [24.1, 230.0], [24.2, 230.0], [24.3, 230.0], [24.4, 231.0], [24.5, 231.0], [24.6, 231.0], [24.7, 232.0], [24.8, 232.0], [24.9, 232.0], [25.0, 233.0], [25.1, 233.0], [25.2, 234.0], [25.3, 234.0], [25.4, 235.0], [25.5, 235.0], [25.6, 236.0], [25.7, 236.0], [25.8, 236.0], [25.9, 237.0], [26.0, 237.0], [26.1, 238.0], [26.2, 238.0], [26.3, 239.0], [26.4, 239.0], [26.5, 240.0], [26.6, 240.0], [26.7, 241.0], [26.8, 241.0], [26.9, 242.0], [27.0, 242.0], [27.1, 243.0], [27.2, 243.0], [27.3, 244.0], [27.4, 244.0], [27.5, 244.0], [27.6, 245.0], [27.7, 245.0], [27.8, 245.0], [27.9, 246.0], [28.0, 246.0], [28.1, 246.0], [28.2, 247.0], [28.3, 247.0], [28.4, 247.0], [28.5, 248.0], [28.6, 248.0], [28.7, 248.0], [28.8, 248.0], [28.9, 249.0], [29.0, 249.0], [29.1, 249.0], [29.2, 249.0], [29.3, 250.0], [29.4, 250.0], [29.5, 250.0], [29.6, 250.0], [29.7, 251.0], [29.8, 251.0], [29.9, 251.0], [30.0, 251.0], [30.1, 252.0], [30.2, 252.0], [30.3, 252.0], [30.4, 253.0], [30.5, 253.0], [30.6, 253.0], [30.7, 253.0], [30.8, 254.0], [30.9, 254.0], [31.0, 254.0], [31.1, 254.0], [31.2, 254.0], [31.3, 255.0], [31.4, 255.0], [31.5, 255.0], [31.6, 255.0], [31.7, 255.0], [31.8, 256.0], [31.9, 256.0], [32.0, 256.0], [32.1, 256.0], [32.2, 257.0], [32.3, 257.0], [32.4, 257.0], [32.5, 257.0], [32.6, 258.0], [32.7, 258.0], [32.8, 258.0], [32.9, 259.0], [33.0, 259.0], [33.1, 259.0], [33.2, 259.0], [33.3, 260.0], [33.4, 260.0], [33.5, 260.0], [33.6, 261.0], [33.7, 261.0], [33.8, 261.0], [33.9, 262.0], [34.0, 262.0], [34.1, 262.0], [34.2, 262.0], [34.3, 263.0], [34.4, 263.0], [34.5, 263.0], [34.6, 264.0], [34.7, 264.0], [34.8, 265.0], [34.9, 265.0], [35.0, 265.0], [35.1, 266.0], [35.2, 266.0], [35.3, 267.0], [35.4, 267.0], [35.5, 268.0], [35.6, 268.0], [35.7, 268.0], [35.8, 269.0], [35.9, 269.0], [36.0, 270.0], [36.1, 270.0], [36.2, 271.0], [36.3, 271.0], [36.4, 272.0], [36.5, 272.0], [36.6, 273.0], [36.7, 273.0], [36.8, 273.0], [36.9, 274.0], [37.0, 274.0], [37.1, 274.0], [37.2, 275.0], [37.3, 275.0], [37.4, 275.0], [37.5, 275.0], [37.6, 276.0], [37.7, 276.0], [37.8, 276.0], [37.9, 276.0], [38.0, 276.0], [38.1, 277.0], [38.2, 277.0], [38.3, 277.0], [38.4, 277.0], [38.5, 277.0], [38.6, 278.0], [38.7, 278.0], [38.8, 278.0], [38.9, 278.0], [39.0, 278.0], [39.1, 278.0], [39.2, 278.0], [39.3, 279.0], [39.4, 279.0], [39.5, 279.0], [39.6, 279.0], [39.7, 279.0], [39.8, 279.0], [39.9, 279.0], [40.0, 280.0], [40.1, 280.0], [40.2, 280.0], [40.3, 280.0], [40.4, 280.0], [40.5, 280.0], [40.6, 280.0], [40.7, 280.0], [40.8, 280.0], [40.9, 280.0], [41.0, 281.0], [41.1, 281.0], [41.2, 281.0], [41.3, 281.0], [41.4, 281.0], [41.5, 281.0], [41.6, 281.0], [41.7, 281.0], [41.8, 281.0], [41.9, 281.0], [42.0, 282.0], [42.1, 282.0], [42.2, 282.0], [42.3, 282.0], [42.4, 282.0], [42.5, 282.0], [42.6, 282.0], [42.7, 282.0], [42.8, 282.0], [42.9, 282.0], [43.0, 282.0], [43.1, 282.0], [43.2, 282.0], [43.3, 283.0], [43.4, 283.0], [43.5, 283.0], [43.6, 283.0], [43.7, 283.0], [43.8, 283.0], [43.9, 283.0], [44.0, 283.0], [44.1, 283.0], [44.2, 283.0], [44.3, 283.0], [44.4, 283.0], [44.5, 283.0], [44.6, 283.0], [44.7, 284.0], [44.8, 284.0], [44.9, 284.0], [45.0, 284.0], [45.1, 284.0], [45.2, 284.0], [45.3, 284.0], [45.4, 284.0], [45.5, 284.0], [45.6, 284.0], [45.7, 284.0], [45.8, 284.0], [45.9, 284.0], [46.0, 284.0], [46.1, 284.0], [46.2, 285.0], [46.3, 285.0], [46.4, 285.0], [46.5, 285.0], [46.6, 285.0], [46.7, 285.0], [46.8, 285.0], [46.9, 285.0], [47.0, 285.0], [47.1, 285.0], [47.2, 285.0], [47.3, 285.0], [47.4, 285.0], [47.5, 285.0], [47.6, 285.0], [47.7, 285.0], [47.8, 285.0], [47.9, 285.0], [48.0, 286.0], [48.1, 286.0], [48.2, 286.0], [48.3, 286.0], [48.4, 286.0], [48.5, 286.0], [48.6, 286.0], [48.7, 286.0], [48.8, 286.0], [48.9, 286.0], [49.0, 286.0], [49.1, 286.0], [49.2, 286.0], [49.3, 286.0], [49.4, 286.0], [49.5, 286.0], [49.6, 286.0], [49.7, 286.0], [49.8, 287.0], [49.9, 287.0], [50.0, 287.0], [50.1, 287.0], [50.2, 287.0], [50.3, 287.0], [50.4, 287.0], [50.5, 287.0], [50.6, 287.0], [50.7, 287.0], [50.8, 287.0], [50.9, 287.0], [51.0, 287.0], [51.1, 287.0], [51.2, 287.0], [51.3, 287.0], [51.4, 287.0], [51.5, 287.0], [51.6, 287.0], [51.7, 287.0], [51.8, 288.0], [51.9, 288.0], [52.0, 288.0], [52.1, 288.0], [52.2, 288.0], [52.3, 288.0], [52.4, 288.0], [52.5, 288.0], [52.6, 288.0], [52.7, 288.0], [52.8, 288.0], [52.9, 288.0], [53.0, 288.0], [53.1, 288.0], [53.2, 288.0], [53.3, 288.0], [53.4, 288.0], [53.5, 288.0], [53.6, 288.0], [53.7, 288.0], [53.8, 288.0], [53.9, 288.0], [54.0, 289.0], [54.1, 289.0], [54.2, 289.0], [54.3, 289.0], [54.4, 289.0], [54.5, 289.0], [54.6, 289.0], [54.7, 289.0], [54.8, 289.0], [54.9, 289.0], [55.0, 289.0], [55.1, 289.0], [55.2, 289.0], [55.3, 289.0], [55.4, 289.0], [55.5, 289.0], [55.6, 289.0], [55.7, 289.0], [55.8, 289.0], [55.9, 289.0], [56.0, 289.0], [56.1, 289.0], [56.2, 289.0], [56.3, 290.0], [56.4, 290.0], [56.5, 290.0], [56.6, 290.0], [56.7, 290.0], [56.8, 290.0], [56.9, 290.0], [57.0, 290.0], [57.1, 290.0], [57.2, 290.0], [57.3, 290.0], [57.4, 290.0], [57.5, 290.0], [57.6, 290.0], [57.7, 290.0], [57.8, 290.0], [57.9, 290.0], [58.0, 290.0], [58.1, 290.0], [58.2, 290.0], [58.3, 290.0], [58.4, 290.0], [58.5, 290.0], [58.6, 290.0], [58.7, 291.0], [58.8, 291.0], [58.9, 291.0], [59.0, 291.0], [59.1, 291.0], [59.2, 291.0], [59.3, 291.0], [59.4, 291.0], [59.5, 291.0], [59.6, 291.0], [59.7, 291.0], [59.8, 291.0], [59.9, 291.0], [60.0, 291.0], [60.1, 291.0], [60.2, 291.0], [60.3, 291.0], [60.4, 291.0], [60.5, 291.0], [60.6, 291.0], [60.7, 291.0], [60.8, 291.0], [60.9, 291.0], [61.0, 292.0], [61.1, 292.0], [61.2, 292.0], [61.3, 292.0], [61.4, 292.0], [61.5, 292.0], [61.6, 292.0], [61.7, 292.0], [61.8, 292.0], [61.9, 292.0], [62.0, 292.0], [62.1, 292.0], [62.2, 292.0], [62.3, 292.0], [62.4, 292.0], [62.5, 292.0], [62.6, 292.0], [62.7, 292.0], [62.8, 292.0], [62.9, 292.0], [63.0, 292.0], [63.1, 292.0], [63.2, 292.0], [63.3, 292.0], [63.4, 292.0], [63.5, 293.0], [63.6, 293.0], [63.7, 293.0], [63.8, 293.0], [63.9, 293.0], [64.0, 293.0], [64.1, 293.0], [64.2, 293.0], [64.3, 293.0], [64.4, 293.0], [64.5, 293.0], [64.6, 293.0], [64.7, 293.0], [64.8, 293.0], [64.9, 293.0], [65.0, 293.0], [65.1, 293.0], [65.2, 293.0], [65.3, 293.0], [65.4, 293.0], [65.5, 293.0], [65.6, 293.0], [65.7, 293.0], [65.8, 293.0], [65.9, 294.0], [66.0, 294.0], [66.1, 294.0], [66.2, 294.0], [66.3, 294.0], [66.4, 294.0], [66.5, 294.0], [66.6, 294.0], [66.7, 294.0], [66.8, 294.0], [66.9, 294.0], [67.0, 294.0], [67.1, 294.0], [67.2, 294.0], [67.3, 294.0], [67.4, 294.0], [67.5, 294.0], [67.6, 294.0], [67.7, 294.0], [67.8, 294.0], [67.9, 294.0], [68.0, 294.0], [68.1, 294.0], [68.2, 294.0], [68.3, 294.0], [68.4, 294.0], [68.5, 295.0], [68.6, 295.0], [68.7, 295.0], [68.8, 295.0], [68.9, 295.0], [69.0, 295.0], [69.1, 295.0], [69.2, 295.0], [69.3, 295.0], [69.4, 295.0], [69.5, 295.0], [69.6, 295.0], [69.7, 295.0], [69.8, 295.0], [69.9, 295.0], [70.0, 295.0], [70.1, 295.0], [70.2, 295.0], [70.3, 295.0], [70.4, 295.0], [70.5, 295.0], [70.6, 295.0], [70.7, 295.0], [70.8, 295.0], [70.9, 296.0], [71.0, 296.0], [71.1, 296.0], [71.2, 296.0], [71.3, 296.0], [71.4, 296.0], [71.5, 296.0], [71.6, 296.0], [71.7, 296.0], [71.8, 296.0], [71.9, 296.0], [72.0, 296.0], [72.1, 296.0], [72.2, 296.0], [72.3, 296.0], [72.4, 296.0], [72.5, 296.0], [72.6, 296.0], [72.7, 296.0], [72.8, 296.0], [72.9, 296.0], [73.0, 296.0], [73.1, 296.0], [73.2, 296.0], [73.3, 297.0], [73.4, 297.0], [73.5, 297.0], [73.6, 297.0], [73.7, 297.0], [73.8, 297.0], [73.9, 297.0], [74.0, 297.0], [74.1, 297.0], [74.2, 297.0], [74.3, 297.0], [74.4, 297.0], [74.5, 297.0], [74.6, 297.0], [74.7, 297.0], [74.8, 297.0], [74.9, 297.0], [75.0, 297.0], [75.1, 297.0], [75.2, 297.0], [75.3, 297.0], [75.4, 297.0], [75.5, 298.0], [75.6, 298.0], [75.7, 298.0], [75.8, 298.0], [75.9, 298.0], [76.0, 298.0], [76.1, 298.0], [76.2, 298.0], [76.3, 298.0], [76.4, 298.0], [76.5, 298.0], [76.6, 298.0], [76.7, 298.0], [76.8, 298.0], [76.9, 298.0], [77.0, 298.0], [77.1, 298.0], [77.2, 298.0], [77.3, 298.0], [77.4, 298.0], [77.5, 299.0], [77.6, 299.0], [77.7, 299.0], [77.8, 299.0], [77.9, 299.0], [78.0, 299.0], [78.1, 299.0], [78.2, 299.0], [78.3, 299.0], [78.4, 299.0], [78.5, 299.0], [78.6, 299.0], [78.7, 299.0], [78.8, 299.0], [78.9, 299.0], [79.0, 299.0], [79.1, 299.0], [79.2, 299.0], [79.3, 299.0], [79.4, 300.0], [79.5, 300.0], [79.6, 300.0], [79.7, 300.0], [79.8, 300.0], [79.9, 300.0], [80.0, 300.0], [80.1, 300.0], [80.2, 300.0], [80.3, 300.0], [80.4, 300.0], [80.5, 300.0], [80.6, 300.0], [80.7, 300.0], [80.8, 300.0], [80.9, 300.0], [81.0, 300.0], [81.1, 300.0], [81.2, 300.0], [81.3, 301.0], [81.4, 301.0], [81.5, 301.0], [81.6, 301.0], [81.7, 301.0], [81.8, 301.0], [81.9, 301.0], [82.0, 301.0], [82.1, 301.0], [82.2, 301.0], [82.3, 301.0], [82.4, 301.0], [82.5, 301.0], [82.6, 301.0], [82.7, 301.0], [82.8, 301.0], [82.9, 302.0], [83.0, 302.0], [83.1, 302.0], [83.2, 302.0], [83.3, 302.0], [83.4, 302.0], [83.5, 302.0], [83.6, 302.0], [83.7, 302.0], [83.8, 302.0], [83.9, 302.0], [84.0, 302.0], [84.1, 302.0], [84.2, 302.0], [84.3, 302.0], [84.4, 302.0], [84.5, 302.0], [84.6, 303.0], [84.7, 303.0], [84.8, 303.0], [84.9, 303.0], [85.0, 303.0], [85.1, 303.0], [85.2, 303.0], [85.3, 303.0], [85.4, 303.0], [85.5, 303.0], [85.6, 303.0], [85.7, 303.0], [85.8, 303.0], [85.9, 303.0], [86.0, 304.0], [86.1, 304.0], [86.2, 304.0], [86.3, 304.0], [86.4, 304.0], [86.5, 304.0], [86.6, 304.0], [86.7, 304.0], [86.8, 304.0], [86.9, 304.0], [87.0, 304.0], [87.1, 304.0], [87.2, 305.0], [87.3, 305.0], [87.4, 305.0], [87.5, 305.0], [87.6, 305.0], [87.7, 305.0], [87.8, 305.0], [87.9, 305.0], [88.0, 305.0], [88.1, 305.0], [88.2, 305.0], [88.3, 305.0], [88.4, 306.0], [88.5, 306.0], [88.6, 306.0], [88.7, 306.0], [88.8, 306.0], [88.9, 306.0], [89.0, 306.0], [89.1, 306.0], [89.2, 306.0], [89.3, 306.0], [89.4, 306.0], [89.5, 307.0], [89.6, 307.0], [89.7, 307.0], [89.8, 307.0], [89.9, 307.0], [90.0, 307.0], [90.1, 307.0], [90.2, 307.0], [90.3, 307.0], [90.4, 308.0], [90.5, 308.0], [90.6, 308.0], [90.7, 308.0], [90.8, 308.0], [90.9, 308.0], [91.0, 308.0], [91.1, 308.0], [91.2, 308.0], [91.3, 309.0], [91.4, 309.0], [91.5, 309.0], [91.6, 309.0], [91.7, 309.0], [91.8, 309.0], [91.9, 309.0], [92.0, 310.0], [92.1, 310.0], [92.2, 310.0], [92.3, 310.0], [92.4, 310.0], [92.5, 310.0], [92.6, 311.0], [92.7, 311.0], [92.8, 311.0], [92.9, 311.0], [93.0, 311.0], [93.1, 311.0], [93.2, 312.0], [93.3, 312.0], [93.4, 312.0], [93.5, 312.0], [93.6, 312.0], [93.7, 313.0], [93.8, 313.0], [93.9, 313.0], [94.0, 313.0], [94.1, 314.0], [94.2, 314.0], [94.3, 314.0], [94.4, 314.0], [94.5, 315.0], [94.6, 315.0], [94.7, 315.0], [94.8, 316.0], [94.9, 316.0], [95.0, 316.0], [95.1, 317.0], [95.2, 317.0], [95.3, 317.0], [95.4, 318.0], [95.5, 318.0], [95.6, 319.0], [95.7, 319.0], [95.8, 320.0], [95.9, 320.0], [96.0, 321.0], [96.1, 321.0], [96.2, 322.0], [96.3, 323.0], [96.4, 323.0], [96.5, 324.0], [96.6, 325.0], [96.7, 326.0], [96.8, 327.0], [96.9, 328.0], [97.0, 330.0], [97.1, 331.0], [97.2, 333.0], [97.3, 335.0], [97.4, 337.0], [97.5, 341.0], [97.6, 344.0], [97.7, 347.0], [97.8, 351.0], [97.9, 355.0], [98.0, 362.0], [98.1, 372.0], [98.2, 387.0], [98.3, 405.0], [98.4, 427.0], [98.5, 461.0], [98.6, 533.0], [98.7, 674.0], [98.8, 1041.0], [98.9, 60026.0], [99.0, 60050.0], [99.1, 60214.0], [99.2, 60224.0], [99.3, 60249.0], [99.4, 60276.0], [99.5, 60282.0], [99.6, 60287.0], [99.7, 60291.0], [99.8, 60297.0], [99.9, 60305.0], [100.0, 100025.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[0.0, 18.0], [0.1, 18.0], [0.2, 18.0], [0.3, 18.0], [0.4, 18.0], [0.5, 18.0], [0.6, 18.0], [0.7, 18.0], [0.8, 18.0], [0.9, 18.0], [1.0, 18.0], [1.1, 18.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 19.0], [3.8, 19.0], [3.9, 19.0], [4.0, 19.0], [4.1, 19.0], [4.2, 19.0], [4.3, 19.0], [4.4, 19.0], [4.5, 19.0], [4.6, 19.0], [4.7, 19.0], [4.8, 19.0], [4.9, 19.0], [5.0, 19.0], [5.1, 19.0], [5.2, 19.0], [5.3, 19.0], [5.4, 19.0], [5.5, 19.0], [5.6, 19.0], [5.7, 19.0], [5.8, 19.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 19.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 20.0], [7.9, 20.0], [8.0, 20.0], [8.1, 20.0], [8.2, 20.0], [8.3, 20.0], [8.4, 20.0], [8.5, 20.0], [8.6, 20.0], [8.7, 20.0], [8.8, 20.0], [8.9, 20.0], [9.0, 20.0], [9.1, 20.0], [9.2, 20.0], [9.3, 20.0], [9.4, 20.0], [9.5, 20.0], [9.6, 20.0], [9.7, 20.0], [9.8, 20.0], [9.9, 20.0], [10.0, 20.0], [10.1, 20.0], [10.2, 20.0], [10.3, 20.0], [10.4, 20.0], [10.5, 20.0], [10.6, 20.0], [10.7, 20.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 20.0], [11.5, 20.0], [11.6, 20.0], [11.7, 20.0], [11.8, 20.0], [11.9, 20.0], [12.0, 20.0], [12.1, 20.0], [12.2, 20.0], [12.3, 20.0], [12.4, 20.0], [12.5, 20.0], [12.6, 20.0], [12.7, 20.0], [12.8, 20.0], [12.9, 20.0], [13.0, 20.0], [13.1, 20.0], [13.2, 20.0], [13.3, 20.0], [13.4, 20.0], [13.5, 20.0], [13.6, 20.0], [13.7, 20.0], [13.8, 20.0], [13.9, 20.0], [14.0, 20.0], [14.1, 20.0], [14.2, 20.0], [14.3, 20.0], [14.4, 20.0], [14.5, 20.0], [14.6, 20.0], [14.7, 20.0], [14.8, 20.0], [14.9, 20.0], [15.0, 20.0], [15.1, 20.0], [15.2, 20.0], [15.3, 20.0], [15.4, 20.0], [15.5, 20.0], [15.6, 20.0], [15.7, 20.0], [15.8, 20.0], [15.9, 20.0], [16.0, 20.0], [16.1, 20.0], [16.2, 20.0], [16.3, 20.0], [16.4, 20.0], [16.5, 20.0], [16.6, 20.0], [16.7, 20.0], [16.8, 20.0], [16.9, 20.0], [17.0, 20.0], [17.1, 20.0], [17.2, 20.0], [17.3, 20.0], [17.4, 20.0], [17.5, 20.0], [17.6, 20.0], [17.7, 20.0], [17.8, 20.0], [17.9, 20.0], [18.0, 20.0], [18.1, 20.0], [18.2, 20.0], [18.3, 20.0], [18.4, 20.0], [18.5, 20.0], [18.6, 20.0], [18.7, 20.0], [18.8, 20.0], [18.9, 20.0], [19.0, 20.0], [19.1, 20.0], [19.2, 20.0], [19.3, 20.0], [19.4, 20.0], [19.5, 20.0], [19.6, 20.0], [19.7, 20.0], [19.8, 20.0], [19.9, 20.0], [20.0, 20.0], [20.1, 20.0], [20.2, 20.0], [20.3, 20.0], [20.4, 20.0], [20.5, 20.0], [20.6, 20.0], [20.7, 20.0], [20.8, 20.0], [20.9, 20.0], [21.0, 20.0], [21.1, 20.0], [21.2, 20.0], [21.3, 20.0], [21.4, 20.0], [21.5, 20.0], [21.6, 20.0], [21.7, 20.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 20.0], [22.8, 20.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 20.0], [24.1, 20.0], [24.2, 20.0], [24.3, 20.0], [24.4, 20.0], [24.5, 20.0], [24.6, 20.0], [24.7, 20.0], [24.8, 20.0], [24.9, 20.0], [25.0, 20.0], [25.1, 20.0], [25.2, 20.0], [25.3, 20.0], [25.4, 20.0], [25.5, 20.0], [25.6, 20.0], [25.7, 20.0], [25.8, 20.0], [25.9, 20.0], [26.0, 20.0], [26.1, 20.0], [26.2, 20.0], [26.3, 20.0], [26.4, 20.0], [26.5, 20.0], [26.6, 20.0], [26.7, 20.0], [26.8, 20.0], [26.9, 20.0], [27.0, 20.0], [27.1, 21.0], [27.2, 21.0], [27.3, 21.0], [27.4, 21.0], [27.5, 21.0], [27.6, 21.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 21.0], [28.1, 21.0], [28.2, 21.0], [28.3, 21.0], [28.4, 21.0], [28.5, 21.0], [28.6, 21.0], [28.7, 21.0], [28.8, 21.0], [28.9, 21.0], [29.0, 21.0], [29.1, 21.0], [29.2, 21.0], [29.3, 21.0], [29.4, 21.0], [29.5, 21.0], [29.6, 21.0], [29.7, 21.0], [29.8, 21.0], [29.9, 21.0], [30.0, 21.0], [30.1, 21.0], [30.2, 21.0], [30.3, 21.0], [30.4, 21.0], [30.5, 21.0], [30.6, 21.0], [30.7, 21.0], [30.8, 21.0], [30.9, 21.0], [31.0, 21.0], [31.1, 21.0], [31.2, 21.0], [31.3, 21.0], [31.4, 21.0], [31.5, 21.0], [31.6, 21.0], [31.7, 21.0], [31.8, 21.0], [31.9, 21.0], [32.0, 21.0], [32.1, 21.0], [32.2, 21.0], [32.3, 21.0], [32.4, 21.0], [32.5, 21.0], [32.6, 21.0], [32.7, 21.0], [32.8, 21.0], [32.9, 21.0], [33.0, 21.0], [33.1, 21.0], [33.2, 21.0], [33.3, 21.0], [33.4, 21.0], [33.5, 21.0], [33.6, 21.0], [33.7, 21.0], [33.8, 21.0], [33.9, 21.0], [34.0, 21.0], [34.1, 21.0], [34.2, 21.0], [34.3, 21.0], [34.4, 21.0], [34.5, 21.0], [34.6, 21.0], [34.7, 21.0], [34.8, 21.0], [34.9, 21.0], [35.0, 21.0], [35.1, 21.0], [35.2, 21.0], [35.3, 21.0], [35.4, 21.0], [35.5, 21.0], [35.6, 21.0], [35.7, 21.0], [35.8, 21.0], [35.9, 21.0], [36.0, 21.0], [36.1, 21.0], [36.2, 21.0], [36.3, 21.0], [36.4, 21.0], [36.5, 21.0], [36.6, 21.0], [36.7, 21.0], [36.8, 21.0], [36.9, 21.0], [37.0, 21.0], [37.1, 21.0], [37.2, 21.0], [37.3, 21.0], [37.4, 21.0], [37.5, 21.0], [37.6, 21.0], [37.7, 21.0], [37.8, 21.0], [37.9, 21.0], [38.0, 21.0], [38.1, 21.0], [38.2, 21.0], [38.3, 21.0], [38.4, 21.0], [38.5, 21.0], [38.6, 21.0], [38.7, 21.0], [38.8, 21.0], [38.9, 21.0], [39.0, 21.0], [39.1, 21.0], [39.2, 21.0], [39.3, 21.0], [39.4, 21.0], [39.5, 21.0], [39.6, 21.0], [39.7, 21.0], [39.8, 21.0], [39.9, 21.0], [40.0, 21.0], [40.1, 21.0], [40.2, 21.0], [40.3, 21.0], [40.4, 21.0], [40.5, 21.0], [40.6, 21.0], [40.7, 21.0], [40.8, 21.0], [40.9, 21.0], [41.0, 21.0], [41.1, 21.0], [41.2, 21.0], [41.3, 21.0], [41.4, 21.0], [41.5, 21.0], [41.6, 21.0], [41.7, 21.0], [41.8, 21.0], [41.9, 21.0], [42.0, 21.0], [42.1, 21.0], [42.2, 21.0], [42.3, 21.0], [42.4, 21.0], [42.5, 21.0], [42.6, 21.0], [42.7, 21.0], [42.8, 21.0], [42.9, 21.0], [43.0, 21.0], [43.1, 21.0], [43.2, 21.0], [43.3, 21.0], [43.4, 21.0], [43.5, 21.0], [43.6, 21.0], [43.7, 21.0], [43.8, 21.0], [43.9, 21.0], [44.0, 21.0], [44.1, 21.0], [44.2, 21.0], [44.3, 21.0], [44.4, 21.0], [44.5, 21.0], [44.6, 21.0], [44.7, 21.0], [44.8, 21.0], [44.9, 21.0], [45.0, 21.0], [45.1, 21.0], [45.2, 21.0], [45.3, 21.0], [45.4, 21.0], [45.5, 21.0], [45.6, 21.0], [45.7, 21.0], [45.8, 21.0], [45.9, 21.0], [46.0, 21.0], [46.1, 21.0], [46.2, 21.0], [46.3, 21.0], [46.4, 21.0], [46.5, 21.0], [46.6, 21.0], [46.7, 21.0], [46.8, 21.0], [46.9, 21.0], [47.0, 21.0], [47.1, 21.0], [47.2, 21.0], [47.3, 21.0], [47.4, 21.0], [47.5, 21.0], [47.6, 21.0], [47.7, 21.0], [47.8, 21.0], [47.9, 21.0], [48.0, 21.0], [48.1, 21.0], [48.2, 21.0], [48.3, 21.0], [48.4, 21.0], [48.5, 21.0], [48.6, 21.0], [48.7, 21.0], [48.8, 21.0], [48.9, 21.0], [49.0, 21.0], [49.1, 21.0], [49.2, 21.0], [49.3, 21.0], [49.4, 21.0], [49.5, 21.0], [49.6, 21.0], [49.7, 21.0], [49.8, 21.0], [49.9, 21.0], [50.0, 21.0], [50.1, 21.0], [50.2, 21.0], [50.3, 21.0], [50.4, 21.0], [50.5, 21.0], [50.6, 21.0], [50.7, 21.0], [50.8, 21.0], [50.9, 21.0], [51.0, 21.0], [51.1, 21.0], [51.2, 21.0], [51.3, 21.0], [51.4, 21.0], [51.5, 21.0], [51.6, 21.0], [51.7, 21.0], [51.8, 21.0], [51.9, 21.0], [52.0, 21.0], [52.1, 21.0], [52.2, 21.0], [52.3, 21.0], [52.4, 21.0], [52.5, 21.0], [52.6, 21.0], [52.7, 21.0], [52.8, 21.0], [52.9, 21.0], [53.0, 21.0], [53.1, 21.0], [53.2, 21.0], [53.3, 21.0], [53.4, 21.0], [53.5, 21.0], [53.6, 21.0], [53.7, 21.0], [53.8, 21.0], [53.9, 21.0], [54.0, 21.0], [54.1, 21.0], [54.2, 21.0], [54.3, 21.0], [54.4, 21.0], [54.5, 21.0], [54.6, 21.0], [54.7, 21.0], [54.8, 21.0], [54.9, 21.0], [55.0, 21.0], [55.1, 21.0], [55.2, 21.0], [55.3, 21.0], [55.4, 21.0], [55.5, 21.0], [55.6, 21.0], [55.7, 21.0], [55.8, 21.0], [55.9, 21.0], [56.0, 21.0], [56.1, 21.0], [56.2, 21.0], [56.3, 21.0], [56.4, 21.0], [56.5, 21.0], [56.6, 21.0], [56.7, 21.0], [56.8, 21.0], [56.9, 21.0], [57.0, 21.0], [57.1, 21.0], [57.2, 21.0], [57.3, 21.0], [57.4, 21.0], [57.5, 21.0], [57.6, 21.0], [57.7, 21.0], [57.8, 21.0], [57.9, 21.0], [58.0, 21.0], [58.1, 21.0], [58.2, 21.0], [58.3, 21.0], [58.4, 21.0], [58.5, 21.0], [58.6, 21.0], [58.7, 21.0], [58.8, 21.0], [58.9, 21.0], [59.0, 21.0], [59.1, 21.0], [59.2, 21.0], [59.3, 21.0], [59.4, 21.0], [59.5, 21.0], [59.6, 21.0], [59.7, 21.0], [59.8, 21.0], [59.9, 21.0], [60.0, 21.0], [60.1, 21.0], [60.2, 21.0], [60.3, 21.0], [60.4, 21.0], [60.5, 21.0], [60.6, 21.0], [60.7, 21.0], [60.8, 21.0], [60.9, 21.0], [61.0, 21.0], [61.1, 21.0], [61.2, 21.0], [61.3, 21.0], [61.4, 21.0], [61.5, 21.0], [61.6, 21.0], [61.7, 21.0], [61.8, 21.0], [61.9, 21.0], [62.0, 21.0], [62.1, 21.0], [62.2, 21.0], [62.3, 21.0], [62.4, 21.0], [62.5, 21.0], [62.6, 21.0], [62.7, 21.0], [62.8, 21.0], [62.9, 21.0], [63.0, 21.0], [63.1, 21.0], [63.2, 21.0], [63.3, 21.0], [63.4, 21.0], [63.5, 21.0], [63.6, 21.0], [63.7, 21.0], [63.8, 21.0], [63.9, 21.0], [64.0, 21.0], [64.1, 21.0], [64.2, 21.0], [64.3, 21.0], [64.4, 21.0], [64.5, 21.0], [64.6, 21.0], [64.7, 21.0], [64.8, 21.0], [64.9, 21.0], [65.0, 21.0], [65.1, 21.0], [65.2, 21.0], [65.3, 21.0], [65.4, 21.0], [65.5, 21.0], [65.6, 21.0], [65.7, 21.0], [65.8, 21.0], [65.9, 21.0], [66.0, 21.0], [66.1, 21.0], [66.2, 21.0], [66.3, 21.0], [66.4, 21.0], [66.5, 21.0], [66.6, 21.0], [66.7, 21.0], [66.8, 21.0], [66.9, 21.0], [67.0, 21.0], [67.1, 21.0], [67.2, 21.0], [67.3, 21.0], [67.4, 21.0], [67.5, 21.0], [67.6, 21.0], [67.7, 21.0], [67.8, 21.0], [67.9, 21.0], [68.0, 21.0], [68.1, 21.0], [68.2, 21.0], [68.3, 21.0], [68.4, 21.0], [68.5, 21.0], [68.6, 21.0], [68.7, 21.0], [68.8, 21.0], [68.9, 22.0], [69.0, 22.0], [69.1, 22.0], [69.2, 22.0], [69.3, 22.0], [69.4, 22.0], [69.5, 22.0], [69.6, 22.0], [69.7, 22.0], [69.8, 22.0], [69.9, 22.0], [70.0, 22.0], [70.1, 22.0], [70.2, 22.0], [70.3, 22.0], [70.4, 22.0], [70.5, 22.0], [70.6, 22.0], [70.7, 22.0], [70.8, 22.0], [70.9, 22.0], [71.0, 22.0], [71.1, 22.0], [71.2, 22.0], [71.3, 22.0], [71.4, 22.0], [71.5, 22.0], [71.6, 22.0], [71.7, 22.0], [71.8, 22.0], [71.9, 22.0], [72.0, 22.0], [72.1, 22.0], [72.2, 22.0], [72.3, 22.0], [72.4, 22.0], [72.5, 22.0], [72.6, 22.0], [72.7, 22.0], [72.8, 22.0], [72.9, 22.0], [73.0, 22.0], [73.1, 22.0], [73.2, 22.0], [73.3, 22.0], [73.4, 22.0], [73.5, 22.0], [73.6, 22.0], [73.7, 22.0], [73.8, 22.0], [73.9, 22.0], [74.0, 22.0], [74.1, 22.0], [74.2, 22.0], [74.3, 22.0], [74.4, 22.0], [74.5, 22.0], [74.6, 22.0], [74.7, 22.0], [74.8, 22.0], [74.9, 22.0], [75.0, 22.0], [75.1, 22.0], [75.2, 22.0], [75.3, 22.0], [75.4, 22.0], [75.5, 22.0], [75.6, 22.0], [75.7, 22.0], [75.8, 22.0], [75.9, 22.0], [76.0, 22.0], [76.1, 22.0], [76.2, 22.0], [76.3, 22.0], [76.4, 22.0], [76.5, 22.0], [76.6, 22.0], [76.7, 22.0], [76.8, 22.0], [76.9, 22.0], [77.0, 22.0], [77.1, 22.0], [77.2, 22.0], [77.3, 22.0], [77.4, 22.0], [77.5, 22.0], [77.6, 22.0], [77.7, 22.0], [77.8, 22.0], [77.9, 22.0], [78.0, 22.0], [78.1, 22.0], [78.2, 22.0], [78.3, 22.0], [78.4, 22.0], [78.5, 22.0], [78.6, 22.0], [78.7, 22.0], [78.8, 22.0], [78.9, 22.0], [79.0, 22.0], [79.1, 22.0], [79.2, 22.0], [79.3, 22.0], [79.4, 22.0], [79.5, 22.0], [79.6, 22.0], [79.7, 22.0], [79.8, 22.0], [79.9, 22.0], [80.0, 22.0], [80.1, 22.0], [80.2, 22.0], [80.3, 22.0], [80.4, 22.0], [80.5, 22.0], [80.6, 22.0], [80.7, 22.0], [80.8, 22.0], [80.9, 22.0], [81.0, 22.0], [81.1, 22.0], [81.2, 22.0], [81.3, 22.0], [81.4, 22.0], [81.5, 22.0], [81.6, 22.0], [81.7, 22.0], [81.8, 22.0], [81.9, 22.0], [82.0, 22.0], [82.1, 22.0], [82.2, 22.0], [82.3, 22.0], [82.4, 22.0], [82.5, 22.0], [82.6, 22.0], [82.7, 22.0], [82.8, 22.0], [82.9, 22.0], [83.0, 22.0], [83.1, 22.0], [83.2, 22.0], [83.3, 22.0], [83.4, 22.0], [83.5, 22.0], [83.6, 22.0], [83.7, 22.0], [83.8, 22.0], [83.9, 22.0], [84.0, 22.0], [84.1, 22.0], [84.2, 22.0], [84.3, 22.0], [84.4, 22.0], [84.5, 22.0], [84.6, 22.0], [84.7, 22.0], [84.8, 22.0], [84.9, 22.0], [85.0, 23.0], [85.1, 23.0], [85.2, 23.0], [85.3, 23.0], [85.4, 23.0], [85.5, 23.0], [85.6, 23.0], [85.7, 23.0], [85.8, 23.0], [85.9, 23.0], [86.0, 23.0], [86.1, 23.0], [86.2, 23.0], [86.3, 23.0], [86.4, 23.0], [86.5, 23.0], [86.6, 23.0], [86.7, 23.0], [86.8, 23.0], [86.9, 23.0], [87.0, 23.0], [87.1, 23.0], [87.2, 23.0], [87.3, 23.0], [87.4, 23.0], [87.5, 23.0], [87.6, 23.0], [87.7, 23.0], [87.8, 23.0], [87.9, 23.0], [88.0, 23.0], [88.1, 23.0], [88.2, 23.0], [88.3, 23.0], [88.4, 23.0], [88.5, 23.0], [88.6, 23.0], [88.7, 23.0], [88.8, 23.0], [88.9, 23.0], [89.0, 23.0], [89.1, 23.0], [89.2, 23.0], [89.3, 23.0], [89.4, 23.0], [89.5, 23.0], [89.6, 23.0], [89.7, 23.0], [89.8, 23.0], [89.9, 23.0], [90.0, 24.0], [90.1, 24.0], [90.2, 24.0], [90.3, 24.0], [90.4, 24.0], [90.5, 24.0], [90.6, 24.0], [90.7, 24.0], [90.8, 24.0], [90.9, 24.0], [91.0, 24.0], [91.1, 24.0], [91.2, 24.0], [91.3, 24.0], [91.4, 24.0], [91.5, 24.0], [91.6, 24.0], [91.7, 24.0], [91.8, 24.0], [91.9, 24.0], [92.0, 24.0], [92.1, 24.0], [92.2, 24.0], [92.3, 24.0], [92.4, 24.0], [92.5, 24.0], [92.6, 24.0], [92.7, 24.0], [92.8, 24.0], [92.9, 24.0], [93.0, 25.0], [93.1, 25.0], [93.2, 25.0], [93.3, 25.0], [93.4, 25.0], [93.5, 25.0], [93.6, 25.0], [93.7, 25.0], [93.8, 25.0], [93.9, 25.0], [94.0, 25.0], [94.1, 25.0], [94.2, 25.0], [94.3, 25.0], [94.4, 25.0], [94.5, 25.0], [94.6, 25.0], [94.7, 25.0], [94.8, 25.0], [94.9, 25.0], [95.0, 25.0], [95.1, 25.0], [95.2, 25.0], [95.3, 25.0], [95.4, 26.0], [95.5, 26.0], [95.6, 26.0], [95.7, 26.0], [95.8, 26.0], [95.9, 26.0], [96.0, 26.0], [96.1, 26.0], [96.2, 26.0], [96.3, 26.0], [96.4, 26.0], [96.5, 26.0], [96.6, 26.0], [96.7, 26.0], [96.8, 27.0], [96.9, 27.0], [97.0, 27.0], [97.1, 27.0], [97.2, 27.0], [97.3, 27.0], [97.4, 27.0], [97.5, 28.0], [97.6, 28.0], [97.7, 28.0], [97.8, 28.0], [97.9, 28.0], [98.0, 29.0], [98.1, 29.0], [98.2, 29.0], [98.3, 29.0], [98.4, 30.0], [98.5, 30.0], [98.6, 31.0], [98.7, 31.0], [98.8, 32.0], [98.9, 32.0], [99.0, 33.0], [99.1, 34.0], [99.2, 35.0], [99.3, 37.0], [99.4, 38.0], [99.5, 40.0], [99.6, 42.0], [99.7, 46.0], [99.8, 52.0], [99.9, 75.0]], "isOverall": false, "label": "GenerateTransactionRedis", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 56646.0, "series": [{"data": [[0.0, 55847.0], [2500.0, 1.0], [3500.0, 1.0], [14500.0, 1.0], [59000.0, 1.0], [60000.0, 639.0], [60500.0, 3.0], [1000.0, 34.0], [65000.0, 1.0], [1500.0, 3.0], [100000.0, 2.0], [500.0, 112.0], [2000.0, 1.0]], "isOverall": false, "label": "GenerateTransactionDatabase", "isController": false}, {"data": [[0.0, 55833.0], [2500.0, 1.0], [3500.0, 1.0], [14500.0, 1.0], [59000.0, 1.0], [60000.0, 638.0], [60500.0, 4.0], [1000.0, 34.0], [65000.0, 1.0], [1500.0, 3.0], [100000.0, 2.0], [500.0, 125.0], [2000.0, 2.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[0.0, 56646.0]], "isOverall": false, "label": "GenerateTransactionRedis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 100000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 135.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 97104.0, "series": [{"data": [[1.0, 135.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[3.0, 15632.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[0.0, 97104.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[2.0, 421.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.230808861411645, "minX": 1.50525612E12, "maxY": 98.68791914612284, "series": [{"data": [[1.50525648E12, 39.078248672477564], [1.50525714E12, 39.0], [1.50525618E12, 9.450816629547132], [1.50525684E12, 75.10406007592015], [1.50525654E12, 45.10396213183767], [1.50525624E12, 15.461311123052083], [1.5052569E12, 80.94950448324673], [1.5052566E12, 50.905504267549354], [1.5052563E12, 21.026859045505034], [1.50525696E12, 87.18252685616514], [1.50525666E12, 57.48111433942927], [1.50525636E12, 27.25307881773397], [1.50525702E12, 92.94079856875656], [1.50525672E12, 63.23414071510962], [1.50525642E12, 33.474608268831346], [1.50525708E12, 98.68791914612284], [1.50525612E12, 4.230808861411645], [1.50525678E12, 69.08226861950781]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.50525714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.8396501457726, "minX": 1.0, "maxY": 2680.923076923077, "series": [{"data": [[2.0, 1156.8382352941176], [3.0, 850.7087378640776], [4.0, 714.6764705882352], [5.0, 618.1046511627906], [6.0, 564.4607843137254], [7.0, 517.7479338842975], [8.0, 487.8941605839417], [9.0, 464.8993506493507], [10.0, 448.9550898203592], [11.0, 441.52478134110754], [12.0, 445.59064327485373], [13.0, 439.1440677966103], [14.0, 437.8876404494379], [15.0, 422.4229765013054], [16.0, 547.7785547785548], [17.0, 497.7380952380955], [18.0, 382.3810483870968], [19.0, 513.3352272727275], [20.0, 442.8694942903753], [21.0, 353.6753022452505], [22.0, 397.4898419864561], [23.0, 413.54364089775584], [24.0, 645.3757961783439], [25.0, 368.70074349442416], [26.0, 757.4449064449063], [27.0, 525.8715203426125], [28.0, 815.737248840804], [29.0, 432.36062992125994], [30.0, 392.6197802197804], [31.0, 556.1918465227819], [32.0, 836.7048872180446], [33.0, 495.28490832158], [34.0, 473.0182481751824], [35.0, 865.3792592592587], [36.0, 617.153164556961], [37.0, 505.6395864106353], [38.0, 377.67272727272734], [39.0, 1374.9210526315792], [40.0, 489.9152215799618], [41.0, 683.370967741935], [42.0, 740.0296052631576], [43.0, 1011.6751592356696], [44.0, 918.6740858505572], [45.0, 610.5558343789205], [46.0, 586.7763347763345], [47.0, 482.9332061068702], [48.0, 1008.1777378815078], [49.0, 905.5249307479213], [50.0, 579.3536866359455], [51.0, 725.7624223602477], [52.0, 1087.0191304347823], [53.0, 1236.9556451612898], [54.0, 718.946050096339], [55.0, 839.7431906614784], [56.0, 849.7173913043475], [57.0, 1221.0699186991865], [58.0, 1393.965367965366], [59.0, 859.5220930232554], [60.0, 401.2924528301888], [61.0, 987.503875968992], [62.0, 734.2508090614889], [63.0, 1009.9914529914536], [64.0, 1029.6957787481808], [65.0, 991.4204702627937], [66.0, 972.7055630936229], [67.0, 908.2322435174744], [68.0, 928.8162601626018], [69.0, 919.947030497592], [70.0, 1243.1794871794875], [71.0, 973.4281805745557], [72.0, 926.6957142857156], [73.0, 1138.4373297002728], [74.0, 1045.4960362400877], [75.0, 978.1298174442192], [76.0, 1273.565789473685], [77.0, 1240.137313432835], [78.0, 1183.0884184308836], [79.0, 874.9930434782608], [80.0, 2333.3230769230763], [81.0, 1338.6867627785057], [82.0, 650.4195906432756], [83.0, 1734.2039911308211], [84.0, 1949.1624129930392], [85.0, 1375.8239875389406], [86.0, 1936.5122807017551], [87.0, 1427.5931372549019], [88.0, 1444.1659388646285], [89.0, 1877.454697986577], [90.0, 837.2944523470836], [91.0, 1322.8486416558876], [92.0, 1164.6204217536074], [93.0, 1336.753048780489], [94.0, 1872.7495183044305], [95.0, 1149.0100166944906], [96.0, 1240.9504132231407], [97.0, 1675.7322834645677], [98.0, 1599.9233226837068], [99.0, 1555.1179713340691], [100.0, 1224.7458952306486], [1.0, 2649.0769230769233]], "isOverall": false, "label": "GenerateTransactionDatabase", "isController": false}, {"data": [[56.95196483423358, 935.7862338029155]], "isOverall": false, "label": "GenerateTransactionDatabase-Aggregated", "isController": false}, {"data": [[2.0, 1180.014705882353], [3.0, 873.1165048543689], [4.0, 736.4926470588238], [5.0, 640.5930232558139], [6.0, 587.1666666666667], [7.0, 539.876033057851], [8.0, 509.8759124087592], [9.0, 487.3863636363636], [10.0, 470.9191616766468], [11.0, 462.3731778425655], [12.0, 467.2134502923977], [13.0, 461.6214689265537], [14.0, 459.36516853932596], [15.0, 443.9895561357703], [16.0, 569.272727272727], [17.0, 519.7162698412701], [18.0, 404.07056451612914], [19.0, 535.2556818181811], [20.0, 465.09461663947855], [21.0, 375.8531951640759], [22.0, 419.40406320541774], [23.0, 435.31920199501235], [24.0, 667.0552016985142], [25.0, 390.0408921933086], [26.0, 778.6590436590434], [27.0, 547.4732334047108], [28.0, 837.4095826893351], [29.0, 453.90708661417307], [30.0, 414.3142857142857], [31.0, 577.9664268585135], [32.0, 858.1766917293232], [33.0, 516.4203102961915], [34.0, 494.3886861313872], [35.0, 886.7822222222227], [36.0, 639.098734177216], [37.0, 527.1491875923189], [38.0, 399.0444444444447], [39.0, 1396.4342105263156], [40.0, 511.4161849710984], [41.0, 704.7329749103938], [42.0, 761.3503289473684], [43.0, 1032.9554140127393], [44.0, 940.2766295707466], [45.0, 632.2747804265994], [46.0, 608.3766233766235], [47.0, 504.1736641221375], [48.0, 1029.4919210053858], [49.0, 927.1911357340723], [50.0, 600.7845622119818], [51.0, 747.3183229813664], [52.0, 1108.5652173913047], [53.0, 1258.215725806452], [54.0, 740.063583815028], [55.0, 861.0914396887156], [56.0, 871.1383399209494], [57.0, 1242.5658536585374], [58.0, 1415.5642135642147], [59.0, 881.2674418604656], [60.0, 423.1994609164419], [61.0, 1009.0945736434118], [62.0, 755.8252427184467], [63.0, 1032.1965811965808], [64.0, 1051.2561863173212], [65.0, 1012.6735822959878], [66.0, 994.2971506105839], [67.0, 929.816234498308], [68.0, 950.1804878048783], [69.0, 941.1380417335482], [70.0, 1264.5098039215695], [71.0, 994.785225718195], [72.0, 947.9028571428574], [73.0, 1160.3256130790198], [74.0, 1067.1823329558324], [75.0, 999.6450304259635], [76.0, 1295.0037593984978], [77.0, 1261.6268656716431], [78.0, 1204.891656288915], [79.0, 896.5147826086969], [80.0, 2354.7634615384613], [81.0, 1360.4207077326353], [82.0, 674.802631578947], [83.0, 1755.6696230598677], [84.0, 1970.6751740139214], [85.0, 1397.5358255451722], [86.0, 1958.0140350877189], [87.0, 1448.9820261437926], [88.0, 1465.8187772925776], [89.0, 1899.3070469798672], [90.0, 858.7183499288761], [91.0, 1344.3868046571804], [92.0, 1186.4506104328532], [93.0, 1358.4710365853657], [94.0, 1894.3564547206172], [95.0, 1170.5075125208682], [96.0, 1262.1322314049594], [97.0, 1697.0767716535433], [98.0, 1620.9952076677316], [99.0, 1576.6482910694608], [100.0, 1246.1946833463624], [1.0, 2680.923076923077]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[56.95196483423358, 957.4032941425671]], "isOverall": false, "label": "Transaction Controller-Aggregated", "isController": true}, {"data": [[2.0, 23.19117647058824], [3.0, 22.446601941747566], [4.0, 21.7925925925926], [5.0, 22.468208092485554], [6.0, 22.75490196078432], [7.0, 22.09917355371901], [8.0, 22.000000000000014], [9.0, 22.503246753246753], [10.0, 21.92192192192193], [11.0, 20.8396501457726], [12.0, 21.66180758017493], [13.0, 22.43909348441929], [14.0, 21.471910112359552], [15.0, 21.544270833333343], [16.0, 21.60372960372961], [17.0, 21.932135728542935], [18.0, 21.694949494949483], [19.0, 21.909604519774042], [20.0, 22.25816993464053], [21.0, 22.2013769363167], [22.0, 21.85746606334844], [23.0, 21.77363184079602], [24.0, 21.685897435897434], [25.0, 21.318518518518516], [26.0, 21.21369294605811], [27.0, 21.6137339055794], [28.0, 21.67596899224807], [29.0, 21.54258675078863], [30.0, 21.697167755991277], [31.0, 21.750000000000007], [32.0, 21.461538461538478], [33.0, 21.122708039492238], [34.0, 21.351648351648382], [35.0, 21.422451994091585], [36.0, 21.97591888466413], [37.0, 21.49556213017751], [38.0, 21.363636363636363], [39.0, 21.511811023622062], [40.0, 21.48747591522158], [41.0, 21.375670840787127], [42.0, 21.35914332784186], [43.0, 21.213375796178347], [44.0, 21.631160572337055], [45.0, 21.70388958594731], [46.0, 21.59623733719249], [47.0, 21.24098671726754], [48.0, 21.30700179533215], [49.0, 21.653739612188335], [50.0, 21.44393063583814], [51.0, 21.54643962848298], [52.0, 21.546086956521755], [53.0, 21.228282828282826], [54.0, 21.14230769230767], [55.0, 21.359223300970868], [56.0, 21.424901185770747], [57.0, 21.53257328990226], [58.0, 21.576368876080682], [59.0, 21.780630105017504], [60.0, 21.90994623655914], [61.0, 21.596273291925478], [62.0, 21.558441558441576], [63.0, 22.18297872340425], [64.0, 21.542151162790695], [65.0, 21.303744798890445], [66.0, 21.558265582655817], [67.0, 21.550790067720058], [68.0, 21.409756097560958], [69.0, 21.158653846153854], [70.0, 21.34539969834087], [71.0, 21.33698630136986], [72.0, 21.195714285714295], [73.0, 21.88979591836735], [74.0, 21.701357466063353], [75.0, 21.47870182555781], [76.0, 21.46992481203009], [77.0, 21.49177877428999], [78.0, 21.833125778331254], [79.0, 21.484320557491277], [80.0, 21.459770114942526], [81.0, 21.747368421052624], [82.0, 24.566617862371903], [83.0, 21.44493392070485], [84.0, 21.501160092807407], [85.0, 21.692667706708257], [86.0, 21.50526315789475], [87.0, 21.385620915032675], [88.0, 21.389978213507636], [89.0, 21.86577181208055], [90.0, 21.42958748221908], [91.0, 21.526520051746456], [92.0, 21.836847946725847], [93.0, 21.72865853658536], [94.0, 21.610038610038625], [95.0, 21.483333333333338], [96.0, 21.13696369636962], [97.0, 21.349802371541504], [98.0, 21.09424920127796], [99.0, 21.554696132596707], [100.0, 21.44271239282931], [1.0, 31.884615384615387]], "isOverall": false, "label": "GenerateTransactionRedis", "isController": false}, {"data": [[56.95399498640668, 21.61686615118433]], "isOverall": false, "label": "GenerateTransactionRedis-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 291.31666666666666, "minX": 1.50525612E12, "maxY": 67279.85, "series": [{"data": [[1.50525648E12, 48728.0], [1.50525714E12, 1233.6333333333334], [1.50525618E12, 26469.0], [1.50525684E12, 59203.583333333336], [1.50525654E12, 55860.933333333334], [1.50525624E12, 36480.2], [1.5052569E12, 52227.21666666667], [1.5052566E12, 56535.666666666664], [1.5052563E12, 44069.23333333333], [1.50525696E12, 51853.2], [1.50525666E12, 57250.73333333333], [1.50525636E12, 47817.8], [1.50525702E12, 60109.9], [1.50525672E12, 59127.933333333334], [1.50525642E12, 51926.76666666667], [1.50525708E12, 51837.96666666667], [1.50525612E12, 9542.2], [1.50525678E12, 62496.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.50525648E12, 52329.51666666667], [1.50525714E12, 291.31666666666666], [1.50525618E12, 28267.3], [1.50525684E12, 63531.71666666667], [1.50525654E12, 59818.8], [1.50525624E12, 39025.066666666666], [1.5052569E12, 55539.5], [1.5052566E12, 60199.78333333333], [1.5052563E12, 47229.166666666664], [1.50525696E12, 55154.73333333333], [1.50525666E12, 61338.95], [1.50525636E12, 51107.98333333333], [1.50525702E12, 64462.78333333333], [1.50525672E12, 63629.8], [1.50525642E12, 55527.566666666666], [1.50525708E12, 55343.61666666667], [1.50525612E12, 10208.85], [1.50525678E12, 67279.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.50525714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21.35824381130315, "minX": 1.50525612E12, "maxY": 60264.15584415585, "series": [{"data": [[1.50525648E12, 521.4760902255651], [1.50525714E12, 60242.72727272725], [1.50525618E12, 268.9136008918618], [1.50525684E12, 1055.8028238791132], [1.50525654E12, 656.4268421052623], [1.50525624E12, 312.94758064516157], [1.5052569E12, 1230.1968838526886], [1.5052566E12, 751.739607843137], [1.5052563E12, 342.50966022651545], [1.50525696E12, 1471.906392694067], [1.50525666E12, 864.1392664785833], [1.50525636E12, 441.774422187981], [1.50525702E12, 1266.008786917257], [1.50525672E12, 867.3958951533148], [1.50525642E12, 558.2815864022673], [1.50525708E12, 1653.6826025459707], [1.50525612E12, 273.8124031007752], [1.50525678E12, 871.265372924948]], "isOverall": false, "label": "GenerateTransactionDatabase", "isController": false}, {"data": [[1.50525648E12, 542.9374436090216], [1.50525714E12, 60264.15584415585], [1.50525618E12, 290.7675585284283], [1.50525684E12, 1077.4570225414884], [1.50525654E12, 677.8736842105249], [1.50525624E12, 334.7302419354845], [1.5052569E12, 1252.30169971671], [1.5052566E12, 773.2399999999998], [1.5052563E12, 364.48001332445006], [1.50525696E12, 1493.4854452054765], [1.50525666E12, 885.7078738137985], [1.50525636E12, 463.2887519260406], [1.50525702E12, 1287.610934830367], [1.50525672E12, 889.0519287833835], [1.50525642E12, 579.7838526912153], [1.50525708E12, 1675.0517680339485], [1.50525612E12, 296.6387596899223], [1.50525678E12, 892.6294131400518]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.50525648E12, 21.471029720804523], [1.50525618E12, 21.84777777777777], [1.50525684E12, 21.66444114737884], [1.50525654E12, 21.442752100840302], [1.50525624E12, 21.779388083735878], [1.5052569E12, 22.12644978783595], [1.5052566E12, 21.491127348642955], [1.5052563E12, 21.980039920159683], [1.50525696E12, 21.542580461407034], [1.50525666E12, 21.58350409836064], [1.50525636E12, 21.5116779348494], [1.50525702E12, 21.59566171094317], [1.50525672E12, 21.65135802469131], [1.50525642E12, 21.495189586870428], [1.50525708E12, 21.379300540233192], [1.50525612E12, 22.81413210445468], [1.50525678E12, 21.35824381130315]], "isOverall": false, "label": "GenerateTransactionRedis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.50525714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21.33559084539941, "minX": 1.50525612E12, "maxY": 60264.11688311688, "series": [{"data": [[1.50525648E12, 521.4670676691726], [1.50525714E12, 60242.7012987013], [1.50525618E12, 268.90691192865194], [1.50525684E12, 1055.7894476096112], [1.50525654E12, 656.417368421052], [1.50525624E12, 312.9435483870972], [1.5052569E12, 1230.188385269126], [1.5052566E12, 751.7294117647059], [1.5052563E12, 342.5016655562961], [1.50525696E12, 1471.8995433789933], [1.50525666E12, 864.1277250577072], [1.50525636E12, 441.76425269645597], [1.50525702E12, 1265.9990236758613], [1.50525672E12, 867.3857566765578], [1.50525642E12, 558.2725212464588], [1.50525708E12, 1653.6718528995723], [1.50525612E12, 273.7875968992252], [1.50525678E12, 871.2541501052126]], "isOverall": false, "label": "GenerateTransactionDatabase", "isController": false}, {"data": [[1.50525648E12, 542.9052631578969], [1.50525714E12, 60264.11688311688], [1.50525618E12, 290.734671125975], [1.50525684E12, 1077.414912063412], [1.50525654E12, 677.8360526315777], [1.50525624E12, 334.6927419354837], [1.5052569E12, 1252.2651558073621], [1.5052566E12, 773.2036601307184], [1.5052563E12, 364.420053297802], [1.50525696E12, 1493.4511986301388], [1.50525666E12, 885.6691459348542], [1.50525636E12, 463.2545454545462], [1.50525702E12, 1287.5755430803051], [1.50525672E12, 889.0140949554897], [1.50525642E12, 579.7484419263466], [1.50525708E12, 1675.0104667609637], [1.50525612E12, 296.5720930232558], [1.50525678E12, 892.5950432546181]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.50525648E12, 21.447913539477607], [1.50525618E12, 21.821666666666665], [1.50525684E12, 21.63575667655785], [1.50525654E12, 21.41517857142852], [1.50525624E12, 21.745974235104658], [1.5052569E12, 22.097878359264513], [1.5052566E12, 21.465031315240097], [1.5052563E12, 21.927811044577474], [1.50525696E12, 21.5158074622615], [1.50525666E12, 21.556352459016473], [1.50525636E12, 21.488322065150566], [1.50525702E12, 21.570070679990256], [1.50525672E12, 21.62419753086422], [1.50525642E12, 21.468590831918483], [1.50525708E12, 21.34972988342332], [1.50525612E12, 22.77265745007682], [1.50525678E12, 21.33559084539941]], "isOverall": false, "label": "GenerateTransactionRedis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.50525714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05067725361980384, "minX": 1.50525612E12, "maxY": 3.527131782945738, "series": [{"data": [[1.50525648E12, 0.6384962406015031], [1.50525714E12, 0.48051948051948035], [1.50525618E12, 0.925863991081384], [1.50525684E12, 0.6192717364379489], [1.50525654E12, 0.6142105263157888], [1.50525624E12, 0.7754032258064535], [1.5052569E12, 0.5991501416430595], [1.5052566E12, 0.6112418300653603], [1.5052563E12, 0.6955363091272495], [1.50525696E12, 0.7382990867579889], [1.50525666E12, 0.593229033085405], [1.50525636E12, 0.6684129429892126], [1.50525702E12, 0.5926287527459115], [1.50525672E12, 0.5912462908011862], [1.50525642E12, 0.6212464589235154], [1.50525708E12, 0.579066478076381], [1.50525612E12, 3.0418604651162813], [1.50525678E12, 0.5632452653729259]], "isOverall": false, "label": "GenerateTransactionDatabase", "isController": false}, {"data": [[1.50525648E12, 0.700751879699247], [1.50525714E12, 0.49350649350649345], [1.50525618E12, 1.0629877369007779], [1.50525684E12, 0.6745107753282145], [1.50525654E12, 0.6881578947368404], [1.50525624E12, 0.8689516129032271], [1.5052569E12, 0.6552407932011319], [1.5052566E12, 0.6763398692810455], [1.5052563E12, 0.7858094603597613], [1.50525696E12, 0.8096461187214626], [1.50525666E12, 0.6552962298025128], [1.50525636E12, 0.7359013867488444], [1.50525702E12, 0.6509641200878713], [1.50525672E12, 0.6481206726013828], [1.50525642E12, 0.6796033994334275], [1.50525708E12, 0.6347949080622336], [1.50525612E12, 3.527131782945738], [1.50525678E12, 0.6142155716623805]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.50525648E12, 0.06304413089162422], [1.50525618E12, 0.13555555555555562], [1.50525684E12, 0.05489614243323453], [1.50525654E12, 0.07405462184873975], [1.50525624E12, 0.09380032206119157], [1.5052569E12, 0.05629420084865624], [1.5052566E12, 0.0639352818371607], [1.5052563E12, 0.09081836327345326], [1.50525696E12, 0.07234406152093423], [1.50525666E12, 0.06250000000000006], [1.50525636E12, 0.06883835279655816], [1.50525702E12, 0.05751888861808425], [1.50525672E12, 0.05703703703703702], [1.50525642E12, 0.05631013016411998], [1.50525708E12, 0.05516064827978393], [1.50525612E12, 0.4838709677419354], [1.50525678E12, 0.05067725361980384]], "isOverall": false, "label": "GenerateTransactionRedis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.50525714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.50525612E12, "maxY": 60870.0, "series": [{"data": [[1.50525648E12, 60272.0], [1.50525714E12, 60343.0], [1.50525618E12, 439.0], [1.50525684E12, 60336.0], [1.50525654E12, 60278.0], [1.50525624E12, 60267.0], [1.5052569E12, 60363.0], [1.5052566E12, 60870.0], [1.5052563E12, 60267.0], [1.50525696E12, 60320.0], [1.50525666E12, 60316.0], [1.50525636E12, 60272.0], [1.50525702E12, 60304.0], [1.50525672E12, 60355.0], [1.50525642E12, 60289.0], [1.50525708E12, 60562.0], [1.50525612E12, 1453.0], [1.50525678E12, 60291.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.50525648E12, 18.0], [1.50525714E12, 60217.0], [1.50525618E12, 18.0], [1.50525684E12, 19.0], [1.50525654E12, 18.0], [1.50525624E12, 18.0], [1.5052569E12, 18.0], [1.5052566E12, 18.0], [1.5052563E12, 18.0], [1.50525696E12, 18.0], [1.50525666E12, 18.0], [1.50525636E12, 18.0], [1.50525702E12, 18.0], [1.50525672E12, 18.0], [1.50525642E12, 18.0], [1.50525708E12, 18.0], [1.50525612E12, 18.0], [1.50525678E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.50525648E12, 280.0], [1.50525714E12, 280.0], [1.50525618E12, 281.0], [1.50525684E12, 279.0], [1.50525654E12, 279.0], [1.50525624E12, 280.0], [1.5052569E12, 279.0], [1.5052566E12, 279.0], [1.5052563E12, 280.0], [1.50525696E12, 279.0], [1.50525666E12, 278.0], [1.50525636E12, 280.0], [1.50525702E12, 279.0], [1.50525672E12, 279.0], [1.50525642E12, 280.0], [1.50525708E12, 279.0], [1.50525612E12, 283.29999999999995], [1.50525678E12, 279.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.50525648E12, 310.0], [1.50525714E12, 60228.0], [1.50525618E12, 314.0], [1.50525684E12, 311.0], [1.50525654E12, 311.0], [1.50525624E12, 311.8899999999994], [1.5052569E12, 332.0], [1.5052566E12, 320.0], [1.5052563E12, 308.0], [1.50525696E12, 407.9900000000016], [1.50525666E12, 327.9900000000016], [1.50525636E12, 308.0], [1.50525702E12, 391.9700000000048], [1.50525672E12, 326.0], [1.50525642E12, 309.0], [1.50525708E12, 491.9700000000048], [1.50525612E12, 318.03], [1.50525678E12, 310.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.50525648E12, 286.0], [1.50525714E12, 287.0], [1.50525618E12, 288.0], [1.50525684E12, 285.0], [1.50525654E12, 286.0], [1.50525624E12, 286.0], [1.5052569E12, 286.0], [1.5052566E12, 285.0], [1.5052563E12, 286.0], [1.50525696E12, 287.0], [1.50525666E12, 285.0], [1.50525636E12, 286.0], [1.50525702E12, 286.0], [1.50525672E12, 286.0], [1.50525642E12, 286.0], [1.50525708E12, 287.0], [1.50525612E12, 290.0], [1.50525678E12, 285.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.50525714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 60265.0, "series": [{"data": [[130.0, 22.0], [134.0, 22.0], [142.0, 22.0], [136.0, 22.0], [59.0, 49.0], [1.0, 60265.0], [82.0, 29.0], [21.0, 55.5], [100.0, 25.0], [108.0, 23.0], [110.0, 23.0], [117.0, 22.0], [116.0, 23.0], [126.0, 22.0], [127.0, 22.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[130.0, 196.0], [134.0, 196.0], [142.0, 196.0], [136.0, 197.0], [59.0, 195.0], [1.0, 60008.0], [82.0, 195.0], [100.0, 195.0], [108.0, 196.0], [110.0, 196.0], [117.0, 196.0], [116.0, 196.0], [126.0, 195.0], [127.0, 196.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 142.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 60265.0, "series": [{"data": [[130.0, 22.0], [134.0, 22.0], [142.0, 22.0], [136.0, 22.0], [59.0, 49.0], [1.0, 60265.0], [82.0, 28.0], [21.0, 55.5], [100.0, 25.0], [108.0, 23.0], [110.0, 23.0], [117.0, 22.0], [116.0, 23.0], [126.0, 22.0], [127.0, 22.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[130.0, 196.0], [134.0, 196.0], [142.0, 196.0], [136.0, 197.0], [59.0, 195.0], [1.0, 60008.0], [82.0, 195.0], [100.0, 195.0], [108.0, 196.0], [110.0, 196.0], [117.0, 196.0], [116.0, 196.0], [126.0, 195.0], [127.0, 196.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 142.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.7, "minX": 1.50525612E12, "maxY": 142.75, "series": [{"data": [[1.50525648E12, 111.03333333333333], [1.50525618E12, 60.0], [1.50525684E12, 134.76666666666668], [1.50525654E12, 126.9], [1.50525624E12, 82.83333333333333], [1.5052569E12, 117.86666666666666], [1.5052566E12, 127.71666666666667], [1.5052563E12, 100.23333333333333], [1.50525696E12, 117.01666666666667], [1.50525666E12, 130.15], [1.50525636E12, 108.41666666666667], [1.50525702E12, 136.76666666666668], [1.50525672E12, 135.0], [1.50525642E12, 117.83333333333333], [1.50525708E12, 117.21666666666667], [1.50525612E12, 21.7], [1.50525678E12, 142.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.50525708E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.50525612E12, "maxY": 115.31666666666666, "series": [{"data": [[1.50525648E12, 97.8], [1.50525714E12, 1.1666666666666667], [1.50525618E12, 59.85], [1.50525684E12, 110.95], [1.50525654E12, 107.41666666666667], [1.50525624E12, 80.38333333333334], [1.5052569E12, 100.86666666666666], [1.5052566E12, 107.3], [1.5052563E12, 92.55], [1.50525696E12, 102.71666666666667], [1.50525666E12, 109.3], [1.50525636E12, 97.28333333333333], [1.50525702E12, 111.71666666666667], [1.50525672E12, 111.58333333333333], [1.50525642E12, 102.7], [1.50525708E12, 97.16666666666667], [1.50525612E12, 21.6], [1.50525678E12, 115.31666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.50525648E12, 13.1], [1.50525618E12, 0.05], [1.50525684E12, 23.633333333333333], [1.50525654E12, 19.283333333333335], [1.50525624E12, 2.35], [1.5052569E12, 16.733333333333334], [1.5052566E12, 20.15], [1.5052563E12, 7.566666666666666], [1.50525696E12, 14.066666666666666], [1.50525666E12, 20.65], [1.50525636E12, 10.966666666666667], [1.50525702E12, 24.833333333333332], [1.50525672E12, 23.25], [1.50525642E12, 14.95], [1.50525708E12, 20.25], [1.50525678E12, 27.25]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.50525648E12, 0.03333333333333333], [1.50525714E12, 0.11666666666666667], [1.50525684E12, 0.08333333333333333], [1.50525654E12, 0.1], [1.5052569E12, 0.13333333333333333], [1.5052566E12, 0.16666666666666666], [1.5052563E12, 0.016666666666666666], [1.50525696E12, 0.13333333333333333], [1.50525666E12, 0.1], [1.50525636E12, 0.06666666666666667], [1.50525702E12, 0.11666666666666667], [1.50525672E12, 0.06666666666666667], [1.50525642E12, 0.08333333333333333], [1.50525708E12, 0.11666666666666667], [1.50525678E12, 0.08333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.50525684E12, 0.016666666666666666], [1.5052569E12, 0.016666666666666666]], "isOverall": false, "label": "524", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.50525714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.50525612E12, "maxY": 71.36666666666666, "series": [{"data": [[1.50525648E12, 42.28333333333333], [1.50525714E12, 1.1666666666666667], [1.50525618E12, 29.85], [1.50525684E12, 43.55], [1.50525654E12, 43.95], [1.50525624E12, 38.983333333333334], [1.5052569E12, 41.95], [1.5052566E12, 43.43333333333333], [1.5052563E12, 42.45], [1.50525696E12, 44.2], [1.50525666E12, 44.233333333333334], [1.50525636E12, 43.05], [1.50525702E12, 43.333333333333336], [1.50525672E12, 44.083333333333336], [1.50525642E12, 43.8], [1.50525708E12, 38.55], [1.50525612E12, 10.75], [1.50525678E12, 43.95]], "isOverall": false, "label": "Transaction Controller-success", "isController": true}, {"data": [[1.50525648E12, 13.133333333333333], [1.50525714E12, 0.11666666666666667], [1.50525618E12, 0.05], [1.50525684E12, 23.733333333333334], [1.50525654E12, 19.383333333333333], [1.50525624E12, 2.35], [1.5052569E12, 16.883333333333333], [1.5052566E12, 20.316666666666666], [1.5052563E12, 7.583333333333333], [1.50525696E12, 14.2], [1.50525666E12, 20.75], [1.50525636E12, 11.033333333333333], [1.50525702E12, 24.95], [1.50525672E12, 23.316666666666666], [1.50525642E12, 15.033333333333333], [1.50525708E12, 20.366666666666667], [1.50525678E12, 27.333333333333332]], "isOverall": false, "label": "Transaction Controller-failure", "isController": true}, {"data": [[1.50525648E12, 13.133333333333333], [1.50525714E12, 0.11666666666666667], [1.50525618E12, 0.05], [1.50525684E12, 23.733333333333334], [1.50525654E12, 19.383333333333333], [1.50525624E12, 2.35], [1.5052569E12, 16.883333333333333], [1.5052566E12, 20.316666666666666], [1.5052563E12, 7.583333333333333], [1.50525696E12, 14.2], [1.50525666E12, 20.75], [1.50525636E12, 11.033333333333333], [1.50525702E12, 24.95], [1.50525672E12, 23.316666666666666], [1.50525642E12, 15.033333333333333], [1.50525708E12, 20.366666666666667], [1.50525678E12, 27.333333333333332]], "isOverall": false, "label": "GenerateTransactionDatabase-failure", "isController": false}, {"data": [[1.50525648E12, 42.28333333333333], [1.50525714E12, 1.1666666666666667], [1.50525618E12, 29.85], [1.50525684E12, 43.55], [1.50525654E12, 43.95], [1.50525624E12, 38.983333333333334], [1.5052569E12, 41.95], [1.5052566E12, 43.43333333333333], [1.5052563E12, 42.45], [1.50525696E12, 44.2], [1.50525666E12, 44.233333333333334], [1.50525636E12, 43.05], [1.50525702E12, 43.333333333333336], [1.50525672E12, 44.083333333333336], [1.50525642E12, 43.8], [1.50525708E12, 38.55], [1.50525612E12, 10.75], [1.50525678E12, 43.95]], "isOverall": false, "label": "GenerateTransactionDatabase-success", "isController": false}, {"data": [[1.50525648E12, 55.516666666666666], [1.50525618E12, 30.0], [1.50525684E12, 67.4], [1.50525654E12, 63.46666666666667], [1.50525624E12, 41.4], [1.5052569E12, 58.916666666666664], [1.5052566E12, 63.86666666666667], [1.5052563E12, 50.1], [1.50525696E12, 58.516666666666666], [1.50525666E12, 65.06666666666666], [1.50525636E12, 54.233333333333334], [1.50525702E12, 68.38333333333334], [1.50525672E12, 67.5], [1.50525642E12, 58.9], [1.50525708E12, 58.61666666666667], [1.50525612E12, 10.85], [1.50525678E12, 71.36666666666666]], "isOverall": false, "label": "GenerateTransactionRedis-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.50525714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
